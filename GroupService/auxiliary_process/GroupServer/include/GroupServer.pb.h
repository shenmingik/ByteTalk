// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupServer.proto

#ifndef PROTOBUF_GroupServer_2eproto__INCLUDED
#define PROTOBUF_GroupServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ik_ChatServer {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_GroupServer_2eproto();
void protobuf_AssignDesc_GroupServer_2eproto();
void protobuf_ShutdownFile_GroupServer_2eproto();

class AddGroupRequest;
class CreateGroupRequest;
class Request;

// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_ChatServer.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional bytes request_msg = 2;
  void clear_request_msg();
  static const int kRequestMsgFieldNumber = 2;
  const ::std::string& request_msg() const;
  void set_request_msg(const ::std::string& value);
  void set_request_msg(const char* value);
  void set_request_msg(const void* value, size_t size);
  ::std::string* mutable_request_msg();
  ::std::string* release_request_msg();
  void set_allocated_request_msg(::std::string* request_msg);

  // @@protoc_insertion_point(class_scope:ik_ChatServer.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr request_msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GroupServer_2eproto();
  friend void protobuf_AssignDesc_GroupServer_2eproto();
  friend void protobuf_ShutdownFile_GroupServer_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class AddGroupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_ChatServer.AddGroupRequest) */ {
 public:
  AddGroupRequest();
  virtual ~AddGroupRequest();

  AddGroupRequest(const AddGroupRequest& from);

  inline AddGroupRequest& operator=(const AddGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGroupRequest& default_instance();

  void Swap(AddGroupRequest* other);

  // implements Message ----------------------------------------------

  inline AddGroupRequest* New() const { return New(NULL); }

  AddGroupRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddGroupRequest& from);
  void MergeFrom(const AddGroupRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddGroupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 myid = 1;
  void clear_myid();
  static const int kMyidFieldNumber = 1;
  ::google::protobuf::int32 myid() const;
  void set_myid(::google::protobuf::int32 value);

  // optional int32 group_id = 2;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  ::google::protobuf::int32 group_id() const;
  void set_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ik_ChatServer.AddGroupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 myid_;
  ::google::protobuf::int32 group_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GroupServer_2eproto();
  friend void protobuf_AssignDesc_GroupServer_2eproto();
  friend void protobuf_ShutdownFile_GroupServer_2eproto();

  void InitAsDefaultInstance();
  static AddGroupRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateGroupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ik_ChatServer.CreateGroupRequest) */ {
 public:
  CreateGroupRequest();
  virtual ~CreateGroupRequest();

  CreateGroupRequest(const CreateGroupRequest& from);

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupRequest& default_instance();

  void Swap(CreateGroupRequest* other);

  // implements Message ----------------------------------------------

  inline CreateGroupRequest* New() const { return New(NULL); }

  CreateGroupRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateGroupRequest& from);
  void MergeFrom(const CreateGroupRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateGroupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 myid = 1;
  void clear_myid();
  static const int kMyidFieldNumber = 1;
  ::google::protobuf::int32 myid() const;
  void set_myid(::google::protobuf::int32 value);

  // optional bytes group_name = 2;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 2;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  void set_group_name(const char* value);
  void set_group_name(const void* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // @@protoc_insertion_point(class_scope:ik_ChatServer.CreateGroupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  ::google::protobuf::int32 myid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_GroupServer_2eproto();
  friend void protobuf_AssignDesc_GroupServer_2eproto();
  friend void protobuf_ShutdownFile_GroupServer_2eproto();

  void InitAsDefaultInstance();
  static CreateGroupRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional bytes type = 1;
inline void Request::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:ik_ChatServer.Request.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatServer.Request.type)
}
inline void Request::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatServer.Request.type)
}
inline void Request::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatServer.Request.type)
}
inline ::std::string* Request::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatServer.Request.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_type() {
  // @@protoc_insertion_point(field_release:ik_ChatServer.Request.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatServer.Request.type)
}

// optional bytes request_msg = 2;
inline void Request::clear_request_msg() {
  request_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::request_msg() const {
  // @@protoc_insertion_point(field_get:ik_ChatServer.Request.request_msg)
  return request_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_request_msg(const ::std::string& value) {
  
  request_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatServer.Request.request_msg)
}
inline void Request::set_request_msg(const char* value) {
  
  request_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatServer.Request.request_msg)
}
inline void Request::set_request_msg(const void* value, size_t size) {
  
  request_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatServer.Request.request_msg)
}
inline ::std::string* Request::mutable_request_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatServer.Request.request_msg)
  return request_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_request_msg() {
  // @@protoc_insertion_point(field_release:ik_ChatServer.Request.request_msg)
  
  return request_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_request_msg(::std::string* request_msg) {
  if (request_msg != NULL) {
    
  } else {
    
  }
  request_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_msg);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatServer.Request.request_msg)
}

// -------------------------------------------------------------------

// AddGroupRequest

// optional int32 myid = 1;
inline void AddGroupRequest::clear_myid() {
  myid_ = 0;
}
inline ::google::protobuf::int32 AddGroupRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_ChatServer.AddGroupRequest.myid)
  return myid_;
}
inline void AddGroupRequest::set_myid(::google::protobuf::int32 value) {
  
  myid_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatServer.AddGroupRequest.myid)
}

// optional int32 group_id = 2;
inline void AddGroupRequest::clear_group_id() {
  group_id_ = 0;
}
inline ::google::protobuf::int32 AddGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:ik_ChatServer.AddGroupRequest.group_id)
  return group_id_;
}
inline void AddGroupRequest::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatServer.AddGroupRequest.group_id)
}

// -------------------------------------------------------------------

// CreateGroupRequest

// optional int32 myid = 1;
inline void CreateGroupRequest::clear_myid() {
  myid_ = 0;
}
inline ::google::protobuf::int32 CreateGroupRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_ChatServer.CreateGroupRequest.myid)
  return myid_;
}
inline void CreateGroupRequest::set_myid(::google::protobuf::int32 value) {
  
  myid_ = value;
  // @@protoc_insertion_point(field_set:ik_ChatServer.CreateGroupRequest.myid)
}

// optional bytes group_name = 2;
inline void CreateGroupRequest::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupRequest::group_name() const {
  // @@protoc_insertion_point(field_get:ik_ChatServer.CreateGroupRequest.group_name)
  return group_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRequest::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_ChatServer.CreateGroupRequest.group_name)
}
inline void CreateGroupRequest::set_group_name(const char* value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_ChatServer.CreateGroupRequest.group_name)
}
inline void CreateGroupRequest::set_group_name(const void* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_ChatServer.CreateGroupRequest.group_name)
}
inline ::std::string* CreateGroupRequest::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:ik_ChatServer.CreateGroupRequest.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:ik_ChatServer.CreateGroupRequest.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRequest::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:ik_ChatServer.CreateGroupRequest.group_name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_ChatServer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GroupServer_2eproto__INCLUDED
