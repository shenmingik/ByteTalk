// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogSend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogSend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ik {

namespace {

const ::google::protobuf::Descriptor* LogSendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogSendReponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogSendReponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LogSend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_LogSend_2eproto() {
  protobuf_AddDesc_LogSend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LogSend.proto");
  GOOGLE_CHECK(file != NULL);
  LogSendRequest_descriptor_ = file->message_type(0);
  static const int LogSendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSendRequest, node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSendRequest, time_),
  };
  LogSendRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogSendRequest_descriptor_,
      LogSendRequest::default_instance_,
      LogSendRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogSendRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSendRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSendRequest, _is_default_instance_));
  LogSendReponse_descriptor_ = file->message_type(1);
  static const int LogSendReponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSendReponse, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSendReponse, is_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSendReponse, msg_),
  };
  LogSendReponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogSendReponse_descriptor_,
      LogSendReponse::default_instance_,
      LogSendReponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogSendReponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSendReponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogSendReponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LogSend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogSendRequest_descriptor_, &LogSendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogSendReponse_descriptor_, &LogSendReponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LogSend_2eproto() {
  delete LogSendRequest::default_instance_;
  delete LogSendRequest_reflection_;
  delete LogSendReponse::default_instance_;
  delete LogSendReponse_reflection_;
}

void protobuf_AddDesc_LogSend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_LogSend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rLogSend.proto\022\002ik\"1\n\016LogSendRequest\022\021\n"
    "\tnode_name\030\001 \001(\014\022\014\n\004time\030\002 \001(\014\"=\n\016LogSen"
    "dReponse\022\016\n\006serial\030\001 \001(\005\022\016\n\006is_end\030\002 \001(\010"
    "\022\013\n\003msg\030\003 \001(\014b\006proto3", 141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LogSend.proto", &protobuf_RegisterTypes);
  LogSendRequest::default_instance_ = new LogSendRequest();
  LogSendReponse::default_instance_ = new LogSendReponse();
  LogSendRequest::default_instance_->InitAsDefaultInstance();
  LogSendReponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LogSend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LogSend_2eproto {
  StaticDescriptorInitializer_LogSend_2eproto() {
    protobuf_AddDesc_LogSend_2eproto();
  }
} static_descriptor_initializer_LogSend_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogSendRequest::kNodeNameFieldNumber;
const int LogSendRequest::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogSendRequest::LogSendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.LogSendRequest)
}

void LogSendRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogSendRequest::LogSendRequest(const LogSendRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.LogSendRequest)
}

void LogSendRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogSendRequest::~LogSendRequest() {
  // @@protoc_insertion_point(destructor:ik.LogSendRequest)
  SharedDtor();
}

void LogSendRequest::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogSendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSendRequest_descriptor_;
}

const LogSendRequest& LogSendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogSend_2eproto();
  return *default_instance_;
}

LogSendRequest* LogSendRequest::default_instance_ = NULL;

LogSendRequest* LogSendRequest::New(::google::protobuf::Arena* arena) const {
  LogSendRequest* n = new LogSendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.LogSendRequest)
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogSendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.LogSendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes node_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional bytes time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.LogSendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.LogSendRequest)
  return false;
#undef DO_
}

void LogSendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.LogSendRequest)
  // optional bytes node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node_name(), output);
  }

  // optional bytes time = 2;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.LogSendRequest)
}

::google::protobuf::uint8* LogSendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.LogSendRequest)
  // optional bytes node_name = 1;
  if (this->node_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node_name(), target);
  }

  // optional bytes time = 2;
  if (this->time().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.LogSendRequest)
  return target;
}

int LogSendRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.LogSendRequest)
  int total_size = 0;

  // optional bytes node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->node_name());
  }

  // optional bytes time = 2;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.LogSendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogSendRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogSendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.LogSendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.LogSendRequest)
    MergeFrom(*source);
  }
}

void LogSendRequest::MergeFrom(const LogSendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.LogSendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
}

void LogSendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.LogSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSendRequest::CopyFrom(const LogSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.LogSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSendRequest::IsInitialized() const {

  return true;
}

void LogSendRequest::Swap(LogSendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogSendRequest::InternalSwap(LogSendRequest* other) {
  node_name_.Swap(&other->node_name_);
  time_.Swap(&other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogSendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSendRequest_descriptor_;
  metadata.reflection = LogSendRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogSendRequest

// optional bytes node_name = 1;
void LogSendRequest::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogSendRequest::node_name() const {
  // @@protoc_insertion_point(field_get:ik.LogSendRequest.node_name)
  return node_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogSendRequest::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.LogSendRequest.node_name)
}
 void LogSendRequest::set_node_name(const char* value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.LogSendRequest.node_name)
}
 void LogSendRequest::set_node_name(const void* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.LogSendRequest.node_name)
}
 ::std::string* LogSendRequest::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:ik.LogSendRequest.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogSendRequest::release_node_name() {
  // @@protoc_insertion_point(field_release:ik.LogSendRequest.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogSendRequest::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:ik.LogSendRequest.node_name)
}

// optional bytes time = 2;
void LogSendRequest::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogSendRequest::time() const {
  // @@protoc_insertion_point(field_get:ik.LogSendRequest.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogSendRequest::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.LogSendRequest.time)
}
 void LogSendRequest::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.LogSendRequest.time)
}
 void LogSendRequest::set_time(const void* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.LogSendRequest.time)
}
 ::std::string* LogSendRequest::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:ik.LogSendRequest.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogSendRequest::release_time() {
  // @@protoc_insertion_point(field_release:ik.LogSendRequest.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogSendRequest::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:ik.LogSendRequest.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogSendReponse::kSerialFieldNumber;
const int LogSendReponse::kIsEndFieldNumber;
const int LogSendReponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogSendReponse::LogSendReponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.LogSendReponse)
}

void LogSendReponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogSendReponse::LogSendReponse(const LogSendReponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.LogSendReponse)
}

void LogSendReponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_ = 0;
  is_end_ = false;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogSendReponse::~LogSendReponse() {
  // @@protoc_insertion_point(destructor:ik.LogSendReponse)
  SharedDtor();
}

void LogSendReponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogSendReponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogSendReponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogSendReponse_descriptor_;
}

const LogSendReponse& LogSendReponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogSend_2eproto();
  return *default_instance_;
}

LogSendReponse* LogSendReponse::default_instance_ = NULL;

LogSendReponse* LogSendReponse::New(::google::protobuf::Arena* arena) const {
  LogSendReponse* n = new LogSendReponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogSendReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.LogSendReponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogSendReponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogSendReponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serial_, is_end_);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LogSendReponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.LogSendReponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serial = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_end;
        break;
      }

      // optional bool is_end = 2;
      case 2: {
        if (tag == 16) {
         parse_is_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional bytes msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.LogSendReponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.LogSendReponse)
  return false;
#undef DO_
}

void LogSendReponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.LogSendReponse)
  // optional int32 serial = 1;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serial(), output);
  }

  // optional bool is_end = 2;
  if (this->is_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_end(), output);
  }

  // optional bytes msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.LogSendReponse)
}

::google::protobuf::uint8* LogSendReponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.LogSendReponse)
  // optional int32 serial = 1;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serial(), target);
  }

  // optional bool is_end = 2;
  if (this->is_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_end(), target);
  }

  // optional bytes msg = 3;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.LogSendReponse)
  return target;
}

int LogSendReponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.LogSendReponse)
  int total_size = 0;

  // optional int32 serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serial());
  }

  // optional bool is_end = 2;
  if (this->is_end() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogSendReponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.LogSendReponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogSendReponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogSendReponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.LogSendReponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.LogSendReponse)
    MergeFrom(*source);
  }
}

void LogSendReponse::MergeFrom(const LogSendReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.LogSendReponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
  if (from.is_end() != 0) {
    set_is_end(from.is_end());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void LogSendReponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.LogSendReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSendReponse::CopyFrom(const LogSendReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.LogSendReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSendReponse::IsInitialized() const {

  return true;
}

void LogSendReponse::Swap(LogSendReponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogSendReponse::InternalSwap(LogSendReponse* other) {
  std::swap(serial_, other->serial_);
  std::swap(is_end_, other->is_end_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogSendReponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogSendReponse_descriptor_;
  metadata.reflection = LogSendReponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogSendReponse

// optional int32 serial = 1;
void LogSendReponse::clear_serial() {
  serial_ = 0;
}
 ::google::protobuf::int32 LogSendReponse::serial() const {
  // @@protoc_insertion_point(field_get:ik.LogSendReponse.serial)
  return serial_;
}
 void LogSendReponse::set_serial(::google::protobuf::int32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:ik.LogSendReponse.serial)
}

// optional bool is_end = 2;
void LogSendReponse::clear_is_end() {
  is_end_ = false;
}
 bool LogSendReponse::is_end() const {
  // @@protoc_insertion_point(field_get:ik.LogSendReponse.is_end)
  return is_end_;
}
 void LogSendReponse::set_is_end(bool value) {
  
  is_end_ = value;
  // @@protoc_insertion_point(field_set:ik.LogSendReponse.is_end)
}

// optional bytes msg = 3;
void LogSendReponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogSendReponse::msg() const {
  // @@protoc_insertion_point(field_get:ik.LogSendReponse.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogSendReponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.LogSendReponse.msg)
}
 void LogSendReponse::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.LogSendReponse.msg)
}
 void LogSendReponse::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.LogSendReponse.msg)
}
 ::std::string* LogSendReponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik.LogSendReponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogSendReponse::release_msg() {
  // @@protoc_insertion_point(field_release:ik.LogSendReponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogSendReponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ik.LogSendReponse.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ik

// @@protoc_insertion_point(global_scope)
