// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GroupService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ik_GroupService {

namespace {

const ::google::protobuf::Descriptor* AddGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUsersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUsersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupUsersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupUsersResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* GroupServiceRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GroupService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GroupService_2eproto() {
  protobuf_AddDesc_GroupService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GroupService.proto");
  GOOGLE_CHECK(file != NULL);
  AddGroupRequest_descriptor_ = file->message_type(0);
  static const int AddGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupRequest, group_id_),
  };
  AddGroupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddGroupRequest_descriptor_,
      AddGroupRequest::default_instance_,
      AddGroupRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddGroupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGroupRequest, _is_default_instance_));
  CreateGroupRequest_descriptor_ = file->message_type(1);
  static const int CreateGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, group_name_),
  };
  CreateGroupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateGroupRequest_descriptor_,
      CreateGroupRequest::default_instance_,
      CreateGroupRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateGroupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRequest, _is_default_instance_));
  CreateGroupResponse_descriptor_ = file->message_type(2);
  static const int CreateGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, grouid_),
  };
  CreateGroupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateGroupResponse_descriptor_,
      CreateGroupResponse::default_instance_,
      CreateGroupResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateGroupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResponse, _is_default_instance_));
  QuitGroupRequest_descriptor_ = file->message_type(3);
  static const int QuitGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroupRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroupRequest, groupid_),
  };
  QuitGroupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuitGroupRequest_descriptor_,
      QuitGroupRequest::default_instance_,
      QuitGroupRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuitGroupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroupRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroupRequest, _is_default_instance_));
  GetGroupUsersRequest_descriptor_ = file->message_type(4);
  static const int GetGroupUsersRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUsersRequest, group_id_),
  };
  GetGroupUsersRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetGroupUsersRequest_descriptor_,
      GetGroupUsersRequest::default_instance_,
      GetGroupUsersRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetGroupUsersRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUsersRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUsersRequest, _is_default_instance_));
  UserInfo_descriptor_ = file->message_type(5);
  static const int UserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, name_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _is_default_instance_));
  GetGroupUsersResponse_descriptor_ = file->message_type(6);
  static const int GetGroupUsersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUsersResponse, users_),
  };
  GetGroupUsersResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetGroupUsersResponse_descriptor_,
      GetGroupUsersResponse::default_instance_,
      GetGroupUsersResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetGroupUsersResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUsersResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupUsersResponse, _is_default_instance_));
  GroupServiceRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GroupService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddGroupRequest_descriptor_, &AddGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateGroupRequest_descriptor_, &CreateGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateGroupResponse_descriptor_, &CreateGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuitGroupRequest_descriptor_, &QuitGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetGroupUsersRequest_descriptor_, &GetGroupUsersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetGroupUsersResponse_descriptor_, &GetGroupUsersResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GroupService_2eproto() {
  delete AddGroupRequest::default_instance_;
  delete AddGroupRequest_reflection_;
  delete CreateGroupRequest::default_instance_;
  delete CreateGroupRequest_reflection_;
  delete CreateGroupResponse::default_instance_;
  delete CreateGroupResponse_reflection_;
  delete QuitGroupRequest::default_instance_;
  delete QuitGroupRequest_reflection_;
  delete GetGroupUsersRequest::default_instance_;
  delete GetGroupUsersRequest_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete GetGroupUsersResponse::default_instance_;
  delete GetGroupUsersResponse_reflection_;
}

void protobuf_AddDesc_GroupService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_GroupService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022GroupService.proto\022\017ik_GroupService\032\033g"
    "oogle/protobuf/empty.proto\"3\n\017AddGroupRe"
    "quest\022\016\n\006userid\030\001 \001(\005\022\020\n\010group_id\030\002 \001(\005\""
    "8\n\022CreateGroupRequest\022\016\n\006userid\030\001 \001(\005\022\022\n"
    "\ngroup_name\030\002 \001(\014\"%\n\023CreateGroupResponse"
    "\022\016\n\006grouid\030\001 \001(\005\"3\n\020QuitGroupRequest\022\016\n\006"
    "userid\030\001 \001(\005\022\017\n\007groupid\030\002 \001(\005\"(\n\024GetGrou"
    "pUsersRequest\022\020\n\010group_id\030\001 \001(\005\"$\n\010UserI"
    "nfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\"A\n\025GetGrou"
    "pUsersResponse\022(\n\005users\030\001 \003(\0132\031.ik_Group"
    "Service.UserInfo2\331\002\n\017GroupServiceRpc\022D\n\010"
    "AddGroup\022 .ik_GroupService.AddGroupReque"
    "st\032\026.google.protobuf.Empty\022X\n\013CreateGrou"
    "p\022#.ik_GroupService.CreateGroupRequest\032$"
    ".ik_GroupService.CreateGroupResponse\022F\n\t"
    "QuitGroup\022!.ik_GroupService.QuitGroupReq"
    "uest\032\026.google.protobuf.Empty\022^\n\rGetGroup"
    "Users\022%.ik_GroupService.GetGroupUsersReq"
    "uest\032&.ik_GroupService.GetGroupUsersResp"
    "onseB\003\200\001\001b\006proto3", 777);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GroupService.proto", &protobuf_RegisterTypes);
  AddGroupRequest::default_instance_ = new AddGroupRequest();
  CreateGroupRequest::default_instance_ = new CreateGroupRequest();
  CreateGroupResponse::default_instance_ = new CreateGroupResponse();
  QuitGroupRequest::default_instance_ = new QuitGroupRequest();
  GetGroupUsersRequest::default_instance_ = new GetGroupUsersRequest();
  UserInfo::default_instance_ = new UserInfo();
  GetGroupUsersResponse::default_instance_ = new GetGroupUsersResponse();
  AddGroupRequest::default_instance_->InitAsDefaultInstance();
  CreateGroupRequest::default_instance_->InitAsDefaultInstance();
  CreateGroupResponse::default_instance_->InitAsDefaultInstance();
  QuitGroupRequest::default_instance_->InitAsDefaultInstance();
  GetGroupUsersRequest::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  GetGroupUsersResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GroupService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GroupService_2eproto {
  StaticDescriptorInitializer_GroupService_2eproto() {
    protobuf_AddDesc_GroupService_2eproto();
  }
} static_descriptor_initializer_GroupService_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddGroupRequest::kUseridFieldNumber;
const int AddGroupRequest::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddGroupRequest::AddGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_GroupService.AddGroupRequest)
}

void AddGroupRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddGroupRequest::AddGroupRequest(const AddGroupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_GroupService.AddGroupRequest)
}

void AddGroupRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userid_ = 0;
  group_id_ = 0;
}

AddGroupRequest::~AddGroupRequest() {
  // @@protoc_insertion_point(destructor:ik_GroupService.AddGroupRequest)
  SharedDtor();
}

void AddGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddGroupRequest_descriptor_;
}

const AddGroupRequest& AddGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupService_2eproto();
  return *default_instance_;
}

AddGroupRequest* AddGroupRequest::default_instance_ = NULL;

AddGroupRequest* AddGroupRequest::New(::google::protobuf::Arena* arena) const {
  AddGroupRequest* n = new AddGroupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_GroupService.AddGroupRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AddGroupRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddGroupRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, group_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool AddGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_GroupService.AddGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional int32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_GroupService.AddGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_GroupService.AddGroupRequest)
  return false;
#undef DO_
}

void AddGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_GroupService.AddGroupRequest)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 group_id = 2;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_GroupService.AddGroupRequest)
}

::google::protobuf::uint8* AddGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_GroupService.AddGroupRequest)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 group_id = 2;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_GroupService.AddGroupRequest)
  return target;
}

int AddGroupRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_GroupService.AddGroupRequest)
  int total_size = 0;

  // optional int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // optional int32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_GroupService.AddGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AddGroupRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_GroupService.AddGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_GroupService.AddGroupRequest)
    MergeFrom(*source);
  }
}

void AddGroupRequest::MergeFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_GroupService.AddGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void AddGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_GroupService.AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupRequest::CopyFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_GroupService.AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupRequest::IsInitialized() const {

  return true;
}

void AddGroupRequest::Swap(AddGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddGroupRequest::InternalSwap(AddGroupRequest* other) {
  std::swap(userid_, other->userid_);
  std::swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddGroupRequest_descriptor_;
  metadata.reflection = AddGroupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddGroupRequest

// optional int32 userid = 1;
void AddGroupRequest::clear_userid() {
  userid_ = 0;
}
 ::google::protobuf::int32 AddGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.AddGroupRequest.userid)
  return userid_;
}
 void AddGroupRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.AddGroupRequest.userid)
}

// optional int32 group_id = 2;
void AddGroupRequest::clear_group_id() {
  group_id_ = 0;
}
 ::google::protobuf::int32 AddGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.AddGroupRequest.group_id)
  return group_id_;
}
 void AddGroupRequest::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.AddGroupRequest.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGroupRequest::kUseridFieldNumber;
const int CreateGroupRequest::kGroupNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGroupRequest::CreateGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_GroupService.CreateGroupRequest)
}

void CreateGroupRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateGroupRequest::CreateGroupRequest(const CreateGroupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_GroupService.CreateGroupRequest)
}

void CreateGroupRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateGroupRequest::~CreateGroupRequest() {
  // @@protoc_insertion_point(destructor:ik_GroupService.CreateGroupRequest)
  SharedDtor();
}

void CreateGroupRequest::SharedDtor() {
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroupRequest_descriptor_;
}

const CreateGroupRequest& CreateGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupService_2eproto();
  return *default_instance_;
}

CreateGroupRequest* CreateGroupRequest::default_instance_ = NULL;

CreateGroupRequest* CreateGroupRequest::New(::google::protobuf::Arena* arena) const {
  CreateGroupRequest* n = new CreateGroupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_GroupService.CreateGroupRequest)
  userid_ = 0;
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_GroupService.CreateGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_name;
        break;
      }

      // optional bytes group_name = 2;
      case 2: {
        if (tag == 18) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_GroupService.CreateGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_GroupService.CreateGroupRequest)
  return false;
#undef DO_
}

void CreateGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_GroupService.CreateGroupRequest)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional bytes group_name = 2;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->group_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_GroupService.CreateGroupRequest)
}

::google::protobuf::uint8* CreateGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_GroupService.CreateGroupRequest)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional bytes group_name = 2;
  if (this->group_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->group_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_GroupService.CreateGroupRequest)
  return target;
}

int CreateGroupRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_GroupService.CreateGroupRequest)
  int total_size = 0;

  // optional int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // optional bytes group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->group_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_GroupService.CreateGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateGroupRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_GroupService.CreateGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_GroupService.CreateGroupRequest)
    MergeFrom(*source);
  }
}

void CreateGroupRequest::MergeFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_GroupService.CreateGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.group_name().size() > 0) {

    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
}

void CreateGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_GroupService.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupRequest::CopyFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_GroupService.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRequest::IsInitialized() const {

  return true;
}

void CreateGroupRequest::Swap(CreateGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGroupRequest::InternalSwap(CreateGroupRequest* other) {
  std::swap(userid_, other->userid_);
  group_name_.Swap(&other->group_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroupRequest_descriptor_;
  metadata.reflection = CreateGroupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGroupRequest

// optional int32 userid = 1;
void CreateGroupRequest::clear_userid() {
  userid_ = 0;
}
 ::google::protobuf::int32 CreateGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.CreateGroupRequest.userid)
  return userid_;
}
 void CreateGroupRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.CreateGroupRequest.userid)
}

// optional bytes group_name = 2;
void CreateGroupRequest::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateGroupRequest::group_name() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.CreateGroupRequest.group_name)
  return group_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateGroupRequest::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.CreateGroupRequest.group_name)
}
 void CreateGroupRequest::set_group_name(const char* value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.CreateGroupRequest.group_name)
}
 void CreateGroupRequest::set_group_name(const void* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.CreateGroupRequest.group_name)
}
 ::std::string* CreateGroupRequest::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.CreateGroupRequest.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateGroupRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:ik_GroupService.CreateGroupRequest.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateGroupRequest::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.CreateGroupRequest.group_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGroupResponse::kGrouidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGroupResponse::CreateGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_GroupService.CreateGroupResponse)
}

void CreateGroupResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateGroupResponse::CreateGroupResponse(const CreateGroupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_GroupService.CreateGroupResponse)
}

void CreateGroupResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  grouid_ = 0;
}

CreateGroupResponse::~CreateGroupResponse() {
  // @@protoc_insertion_point(destructor:ik_GroupService.CreateGroupResponse)
  SharedDtor();
}

void CreateGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroupResponse_descriptor_;
}

const CreateGroupResponse& CreateGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupService_2eproto();
  return *default_instance_;
}

CreateGroupResponse* CreateGroupResponse::default_instance_ = NULL;

CreateGroupResponse* CreateGroupResponse::New(::google::protobuf::Arena* arena) const {
  CreateGroupResponse* n = new CreateGroupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_GroupService.CreateGroupResponse)
  grouid_ = 0;
}

bool CreateGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_GroupService.CreateGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grouid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_GroupService.CreateGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_GroupService.CreateGroupResponse)
  return false;
#undef DO_
}

void CreateGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_GroupService.CreateGroupResponse)
  // optional int32 grouid = 1;
  if (this->grouid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grouid(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_GroupService.CreateGroupResponse)
}

::google::protobuf::uint8* CreateGroupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_GroupService.CreateGroupResponse)
  // optional int32 grouid = 1;
  if (this->grouid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grouid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_GroupService.CreateGroupResponse)
  return target;
}

int CreateGroupResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_GroupService.CreateGroupResponse)
  int total_size = 0;

  // optional int32 grouid = 1;
  if (this->grouid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grouid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_GroupService.CreateGroupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateGroupResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGroupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_GroupService.CreateGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_GroupService.CreateGroupResponse)
    MergeFrom(*source);
  }
}

void CreateGroupResponse::MergeFrom(const CreateGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_GroupService.CreateGroupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.grouid() != 0) {
    set_grouid(from.grouid());
  }
}

void CreateGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_GroupService.CreateGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupResponse::CopyFrom(const CreateGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_GroupService.CreateGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupResponse::IsInitialized() const {

  return true;
}

void CreateGroupResponse::Swap(CreateGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGroupResponse::InternalSwap(CreateGroupResponse* other) {
  std::swap(grouid_, other->grouid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroupResponse_descriptor_;
  metadata.reflection = CreateGroupResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGroupResponse

// optional int32 grouid = 1;
void CreateGroupResponse::clear_grouid() {
  grouid_ = 0;
}
 ::google::protobuf::int32 CreateGroupResponse::grouid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.CreateGroupResponse.grouid)
  return grouid_;
}
 void CreateGroupResponse::set_grouid(::google::protobuf::int32 value) {
  
  grouid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.CreateGroupResponse.grouid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitGroupRequest::kUseridFieldNumber;
const int QuitGroupRequest::kGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitGroupRequest::QuitGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_GroupService.QuitGroupRequest)
}

void QuitGroupRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QuitGroupRequest::QuitGroupRequest(const QuitGroupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_GroupService.QuitGroupRequest)
}

void QuitGroupRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  userid_ = 0;
  groupid_ = 0;
}

QuitGroupRequest::~QuitGroupRequest() {
  // @@protoc_insertion_point(destructor:ik_GroupService.QuitGroupRequest)
  SharedDtor();
}

void QuitGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuitGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitGroupRequest_descriptor_;
}

const QuitGroupRequest& QuitGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupService_2eproto();
  return *default_instance_;
}

QuitGroupRequest* QuitGroupRequest::default_instance_ = NULL;

QuitGroupRequest* QuitGroupRequest::New(::google::protobuf::Arena* arena) const {
  QuitGroupRequest* n = new QuitGroupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuitGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_GroupService.QuitGroupRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuitGroupRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuitGroupRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(userid_, groupid_);

#undef ZR_HELPER_
#undef ZR_

}

bool QuitGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_GroupService.QuitGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (tag == 16) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_GroupService.QuitGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_GroupService.QuitGroupRequest)
  return false;
#undef DO_
}

void QuitGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_GroupService.QuitGroupRequest)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 groupid = 2;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_GroupService.QuitGroupRequest)
}

::google::protobuf::uint8* QuitGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_GroupService.QuitGroupRequest)
  // optional int32 userid = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 groupid = 2;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_GroupService.QuitGroupRequest)
  return target;
}

int QuitGroupRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_GroupService.QuitGroupRequest)
  int total_size = 0;

  // optional int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // optional int32 groupid = 2;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_GroupService.QuitGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QuitGroupRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_GroupService.QuitGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_GroupService.QuitGroupRequest)
    MergeFrom(*source);
  }
}

void QuitGroupRequest::MergeFrom(const QuitGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_GroupService.QuitGroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
}

void QuitGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_GroupService.QuitGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGroupRequest::CopyFrom(const QuitGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_GroupService.QuitGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroupRequest::IsInitialized() const {

  return true;
}

void QuitGroupRequest::Swap(QuitGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuitGroupRequest::InternalSwap(QuitGroupRequest* other) {
  std::swap(userid_, other->userid_);
  std::swap(groupid_, other->groupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitGroupRequest_descriptor_;
  metadata.reflection = QuitGroupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitGroupRequest

// optional int32 userid = 1;
void QuitGroupRequest::clear_userid() {
  userid_ = 0;
}
 ::google::protobuf::int32 QuitGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.QuitGroupRequest.userid)
  return userid_;
}
 void QuitGroupRequest::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.QuitGroupRequest.userid)
}

// optional int32 groupid = 2;
void QuitGroupRequest::clear_groupid() {
  groupid_ = 0;
}
 ::google::protobuf::int32 QuitGroupRequest::groupid() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.QuitGroupRequest.groupid)
  return groupid_;
}
 void QuitGroupRequest::set_groupid(::google::protobuf::int32 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.QuitGroupRequest.groupid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGroupUsersRequest::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGroupUsersRequest::GetGroupUsersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_GroupService.GetGroupUsersRequest)
}

void GetGroupUsersRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetGroupUsersRequest::GetGroupUsersRequest(const GetGroupUsersRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_GroupService.GetGroupUsersRequest)
}

void GetGroupUsersRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  group_id_ = 0;
}

GetGroupUsersRequest::~GetGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:ik_GroupService.GetGroupUsersRequest)
  SharedDtor();
}

void GetGroupUsersRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUsersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUsersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUsersRequest_descriptor_;
}

const GetGroupUsersRequest& GetGroupUsersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupService_2eproto();
  return *default_instance_;
}

GetGroupUsersRequest* GetGroupUsersRequest::default_instance_ = NULL;

GetGroupUsersRequest* GetGroupUsersRequest::New(::google::protobuf::Arena* arena) const {
  GetGroupUsersRequest* n = new GetGroupUsersRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_GroupService.GetGroupUsersRequest)
  group_id_ = 0;
}

bool GetGroupUsersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_GroupService.GetGroupUsersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_GroupService.GetGroupUsersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_GroupService.GetGroupUsersRequest)
  return false;
#undef DO_
}

void GetGroupUsersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_GroupService.GetGroupUsersRequest)
  // optional int32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_GroupService.GetGroupUsersRequest)
}

::google::protobuf::uint8* GetGroupUsersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_GroupService.GetGroupUsersRequest)
  // optional int32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_GroupService.GetGroupUsersRequest)
  return target;
}

int GetGroupUsersRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_GroupService.GetGroupUsersRequest)
  int total_size = 0;

  // optional int32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUsersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_GroupService.GetGroupUsersRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetGroupUsersRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetGroupUsersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_GroupService.GetGroupUsersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_GroupService.GetGroupUsersRequest)
    MergeFrom(*source);
  }
}

void GetGroupUsersRequest::MergeFrom(const GetGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_GroupService.GetGroupUsersRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void GetGroupUsersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_GroupService.GetGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUsersRequest::CopyFrom(const GetGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_GroupService.GetGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUsersRequest::IsInitialized() const {

  return true;
}

void GetGroupUsersRequest::Swap(GetGroupUsersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGroupUsersRequest::InternalSwap(GetGroupUsersRequest* other) {
  std::swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetGroupUsersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUsersRequest_descriptor_;
  metadata.reflection = GetGroupUsersRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetGroupUsersRequest

// optional int32 group_id = 1;
void GetGroupUsersRequest::clear_group_id() {
  group_id_ = 0;
}
 ::google::protobuf::int32 GetGroupUsersRequest::group_id() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GetGroupUsersRequest.group_id)
  return group_id_;
}
 void GetGroupUsersRequest::set_group_id(::google::protobuf::int32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.GetGroupUsersRequest.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kIdFieldNumber;
const int UserInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_GroupService.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_GroupService.UserInfo)
}

void UserInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:ik_GroupService.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupService_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_GroupService.UserInfo)
  id_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_GroupService.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_GroupService.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_GroupService.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_GroupService.UserInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_GroupService.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_GroupService.UserInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_GroupService.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_GroupService.UserInfo)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_GroupService.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_GroupService.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_GroupService.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_GroupService.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_GroupService.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_GroupService.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional int32 id = 1;
void UserInfo::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.UserInfo.id)
  return id_;
}
 void UserInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_GroupService.UserInfo.id)
}

// optional bytes name = 2;
void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:ik_GroupService.UserInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_GroupService.UserInfo.name)
}
 void UserInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_GroupService.UserInfo.name)
}
 void UserInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_GroupService.UserInfo.name)
}
 ::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ik_GroupService.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:ik_GroupService.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ik_GroupService.UserInfo.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGroupUsersResponse::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGroupUsersResponse::GetGroupUsersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_GroupService.GetGroupUsersResponse)
}

void GetGroupUsersResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetGroupUsersResponse::GetGroupUsersResponse(const GetGroupUsersResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_GroupService.GetGroupUsersResponse)
}

void GetGroupUsersResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetGroupUsersResponse::~GetGroupUsersResponse() {
  // @@protoc_insertion_point(destructor:ik_GroupService.GetGroupUsersResponse)
  SharedDtor();
}

void GetGroupUsersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGroupUsersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupUsersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupUsersResponse_descriptor_;
}

const GetGroupUsersResponse& GetGroupUsersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupService_2eproto();
  return *default_instance_;
}

GetGroupUsersResponse* GetGroupUsersResponse::default_instance_ = NULL;

GetGroupUsersResponse* GetGroupUsersResponse::New(::google::protobuf::Arena* arena) const {
  GetGroupUsersResponse* n = new GetGroupUsersResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetGroupUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_GroupService.GetGroupUsersResponse)
  users_.Clear();
}

bool GetGroupUsersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_GroupService.GetGroupUsersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ik_GroupService.UserInfo users = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_GroupService.GetGroupUsersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_GroupService.GetGroupUsersResponse)
  return false;
#undef DO_
}

void GetGroupUsersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_GroupService.GetGroupUsersResponse)
  // repeated .ik_GroupService.UserInfo users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_GroupService.GetGroupUsersResponse)
}

::google::protobuf::uint8* GetGroupUsersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_GroupService.GetGroupUsersResponse)
  // repeated .ik_GroupService.UserInfo users = 1;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_GroupService.GetGroupUsersResponse)
  return target;
}

int GetGroupUsersResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_GroupService.GetGroupUsersResponse)
  int total_size = 0;

  // repeated .ik_GroupService.UserInfo users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupUsersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_GroupService.GetGroupUsersResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetGroupUsersResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetGroupUsersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_GroupService.GetGroupUsersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_GroupService.GetGroupUsersResponse)
    MergeFrom(*source);
  }
}

void GetGroupUsersResponse::MergeFrom(const GetGroupUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_GroupService.GetGroupUsersResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  users_.MergeFrom(from.users_);
}

void GetGroupUsersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_GroupService.GetGroupUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupUsersResponse::CopyFrom(const GetGroupUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_GroupService.GetGroupUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupUsersResponse::IsInitialized() const {

  return true;
}

void GetGroupUsersResponse::Swap(GetGroupUsersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGroupUsersResponse::InternalSwap(GetGroupUsersResponse* other) {
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetGroupUsersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupUsersResponse_descriptor_;
  metadata.reflection = GetGroupUsersResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetGroupUsersResponse

// repeated .ik_GroupService.UserInfo users = 1;
int GetGroupUsersResponse::users_size() const {
  return users_.size();
}
void GetGroupUsersResponse::clear_users() {
  users_.Clear();
}
const ::ik_GroupService::UserInfo& GetGroupUsersResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:ik_GroupService.GetGroupUsersResponse.users)
  return users_.Get(index);
}
::ik_GroupService::UserInfo* GetGroupUsersResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:ik_GroupService.GetGroupUsersResponse.users)
  return users_.Mutable(index);
}
::ik_GroupService::UserInfo* GetGroupUsersResponse::add_users() {
  // @@protoc_insertion_point(field_add:ik_GroupService.GetGroupUsersResponse.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::ik_GroupService::UserInfo >*
GetGroupUsersResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:ik_GroupService.GetGroupUsersResponse.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::ik_GroupService::UserInfo >&
GetGroupUsersResponse::users() const {
  // @@protoc_insertion_point(field_list:ik_GroupService.GetGroupUsersResponse.users)
  return users_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GroupServiceRpc::~GroupServiceRpc() {}

const ::google::protobuf::ServiceDescriptor* GroupServiceRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupServiceRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* GroupServiceRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupServiceRpc_descriptor_;
}

void GroupServiceRpc::AddGroup(::google::protobuf::RpcController* controller,
                         const ::ik_GroupService::AddGroupRequest*,
                         ::google::protobuf::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::CreateGroup(::google::protobuf::RpcController* controller,
                         const ::ik_GroupService::CreateGroupRequest*,
                         ::ik_GroupService::CreateGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::QuitGroup(::google::protobuf::RpcController* controller,
                         const ::ik_GroupService::QuitGroupRequest*,
                         ::google::protobuf::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QuitGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::GetGroupUsers(::google::protobuf::RpcController* controller,
                         const ::ik_GroupService::GetGroupUsersRequest*,
                         ::ik_GroupService::GetGroupUsersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGroupUsers() not implemented.");
  done->Run();
}

void GroupServiceRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), GroupServiceRpc_descriptor_);
  switch(method->index()) {
    case 0:
      AddGroup(controller,
             ::google::protobuf::down_cast<const ::ik_GroupService::AddGroupRequest*>(request),
             ::google::protobuf::down_cast< ::google::protobuf::Empty*>(response),
             done);
      break;
    case 1:
      CreateGroup(controller,
             ::google::protobuf::down_cast<const ::ik_GroupService::CreateGroupRequest*>(request),
             ::google::protobuf::down_cast< ::ik_GroupService::CreateGroupResponse*>(response),
             done);
      break;
    case 2:
      QuitGroup(controller,
             ::google::protobuf::down_cast<const ::ik_GroupService::QuitGroupRequest*>(request),
             ::google::protobuf::down_cast< ::google::protobuf::Empty*>(response),
             done);
      break;
    case 3:
      GetGroupUsers(controller,
             ::google::protobuf::down_cast<const ::ik_GroupService::GetGroupUsersRequest*>(request),
             ::google::protobuf::down_cast< ::ik_GroupService::GetGroupUsersResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GroupServiceRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ik_GroupService::AddGroupRequest::default_instance();
    case 1:
      return ::ik_GroupService::CreateGroupRequest::default_instance();
    case 2:
      return ::ik_GroupService::QuitGroupRequest::default_instance();
    case 3:
      return ::ik_GroupService::GetGroupUsersRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GroupServiceRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::google::protobuf::Empty::default_instance();
    case 1:
      return ::ik_GroupService::CreateGroupResponse::default_instance();
    case 2:
      return ::google::protobuf::Empty::default_instance();
    case 3:
      return ::ik_GroupService::GetGroupUsersResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GroupServiceRpc_Stub::GroupServiceRpc_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GroupServiceRpc_Stub::GroupServiceRpc_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GroupServiceRpc_Stub::~GroupServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void GroupServiceRpc_Stub::AddGroup(::google::protobuf::RpcController* controller,
                              const ::ik_GroupService::AddGroupRequest* request,
                              ::google::protobuf::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::CreateGroup(::google::protobuf::RpcController* controller,
                              const ::ik_GroupService::CreateGroupRequest* request,
                              ::ik_GroupService::CreateGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::QuitGroup(::google::protobuf::RpcController* controller,
                              const ::ik_GroupService::QuitGroupRequest* request,
                              ::google::protobuf::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::GetGroupUsers(::google::protobuf::RpcController* controller,
                              const ::ik_GroupService::GetGroupUsersRequest* request,
                              ::ik_GroupService::GetGroupUsersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_GroupService

// @@protoc_insertion_point(global_scope)
