// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ik {

namespace {

const ::google::protobuf::Descriptor* LogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* LogServerRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LogServer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_LogServer_2eproto() {
  protobuf_AddDesc_LogServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LogServer.proto");
  GOOGLE_CHECK(file != NULL);
  LogRequest_descriptor_ = file->message_type(0);
  static const int LogRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRequest, msg_),
  };
  LogRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogRequest_descriptor_,
      LogRequest::default_instance_,
      LogRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRequest, _is_default_instance_));
  ErrorMsg_descriptor_ = file->message_type(1);
  static const int ErrorMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, error_msg_),
  };
  ErrorMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrorMsg_descriptor_,
      ErrorMsg::default_instance_,
      ErrorMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(ErrorMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, _is_default_instance_));
  LogResponse_descriptor_ = file->message_type(2);
  static const int LogResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogResponse, msg_),
  };
  LogResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogResponse_descriptor_,
      LogResponse::default_instance_,
      LogResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogResponse, _is_default_instance_));
  LogServerRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LogServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogRequest_descriptor_, &LogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrorMsg_descriptor_, &ErrorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogResponse_descriptor_, &LogResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LogServer_2eproto() {
  delete LogRequest::default_instance_;
  delete LogRequest_reflection_;
  delete ErrorMsg::default_instance_;
  delete ErrorMsg_reflection_;
  delete LogResponse::default_instance_;
  delete LogResponse_reflection_;
}

void protobuf_AddDesc_LogServer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_LogServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017LogServer.proto\022\002ik\032\033google/protobuf/e"
    "mpty.proto\"\'\n\nLogRequest\022\014\n\004name\030\001 \001(\014\022\013"
    "\n\003msg\030\002 \001(\014\",\n\010ErrorMsg\022\r\n\005state\030\001 \001(\010\022\021"
    "\n\terror_msg\030\002 \001(\014\"(\n\013LogResponse\022\031\n\003msg\030"
    "\001 \001(\0132\014.ik.ErrorMsg2\254\001\n\014LogServerRpc\0222\n\010"
    "Log_INFO\022\016.ik.LogRequest\032\026.google.protob"
    "uf.Empty\0223\n\tLog_ERROR\022\016.ik.LogRequest\032\026."
    "google.protobuf.Empty\0223\n\tLog_FATAL\022\016.ik."
    "LogRequest\032\026.google.protobuf.EmptyB\003\200\001\001b"
    "\006proto3", 367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LogServer.proto", &protobuf_RegisterTypes);
  LogRequest::default_instance_ = new LogRequest();
  ErrorMsg::default_instance_ = new ErrorMsg();
  LogResponse::default_instance_ = new LogResponse();
  LogRequest::default_instance_->InitAsDefaultInstance();
  ErrorMsg::default_instance_->InitAsDefaultInstance();
  LogResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LogServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LogServer_2eproto {
  StaticDescriptorInitializer_LogServer_2eproto() {
    protobuf_AddDesc_LogServer_2eproto();
  }
} static_descriptor_initializer_LogServer_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRequest::kNameFieldNumber;
const int LogRequest::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRequest::LogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.LogRequest)
}

void LogRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogRequest::LogRequest(const LogRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.LogRequest)
}

void LogRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogRequest::~LogRequest() {
  // @@protoc_insertion_point(destructor:ik.LogRequest)
  SharedDtor();
}

void LogRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRequest_descriptor_;
}

const LogRequest& LogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogServer_2eproto();
  return *default_instance_;
}

LogRequest* LogRequest::default_instance_ = NULL;

LogRequest* LogRequest::New(::google::protobuf::Arena* arena) const {
  LogRequest* n = new LogRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.LogRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.LogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.LogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.LogRequest)
  return false;
#undef DO_
}

void LogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.LogRequest)
  // optional bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.LogRequest)
}

::google::protobuf::uint8* LogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.LogRequest)
  // optional bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes msg = 2;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.LogRequest)
  return target;
}

int LogRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.LogRequest)
  int total_size = 0;

  // optional bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // optional bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.LogRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.LogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.LogRequest)
    MergeFrom(*source);
  }
}

void LogRequest::MergeFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.LogRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void LogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.LogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRequest::CopyFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.LogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest::IsInitialized() const {

  return true;
}

void LogRequest::Swap(LogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRequest::InternalSwap(LogRequest* other) {
  name_.Swap(&other->name_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRequest_descriptor_;
  metadata.reflection = LogRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRequest

// optional bytes name = 1;
void LogRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRequest::name() const {
  // @@protoc_insertion_point(field_get:ik.LogRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.LogRequest.name)
}
 void LogRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.LogRequest.name)
}
 void LogRequest::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.LogRequest.name)
}
 ::std::string* LogRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ik.LogRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRequest::release_name() {
  // @@protoc_insertion_point(field_release:ik.LogRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ik.LogRequest.name)
}

// optional bytes msg = 2;
void LogRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogRequest::msg() const {
  // @@protoc_insertion_point(field_get:ik.LogRequest.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.LogRequest.msg)
}
 void LogRequest::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.LogRequest.msg)
}
 void LogRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.LogRequest.msg)
}
 ::std::string* LogRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik.LogRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogRequest::release_msg() {
  // @@protoc_insertion_point(field_release:ik.LogRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ik.LogRequest.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorMsg::kStateFieldNumber;
const int ErrorMsg::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorMsg::ErrorMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.ErrorMsg)
}

void ErrorMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ErrorMsg::ErrorMsg(const ErrorMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.ErrorMsg)
}

void ErrorMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = false;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ErrorMsg::~ErrorMsg() {
  // @@protoc_insertion_point(destructor:ik.ErrorMsg)
  SharedDtor();
}

void ErrorMsg::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorMsg_descriptor_;
}

const ErrorMsg& ErrorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogServer_2eproto();
  return *default_instance_;
}

ErrorMsg* ErrorMsg::default_instance_ = NULL;

ErrorMsg* ErrorMsg::New(::google::protobuf::Arena* arena) const {
  ErrorMsg* n = new ErrorMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.ErrorMsg)
  state_ = false;
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.ErrorMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_msg;
        break;
      }

      // optional bytes error_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.ErrorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.ErrorMsg)
  return false;
#undef DO_
}

void ErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.ErrorMsg)
  // optional bool state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  // optional bytes error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik.ErrorMsg)
}

::google::protobuf::uint8* ErrorMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.ErrorMsg)
  // optional bool state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->state(), target);
  }

  // optional bytes error_msg = 2;
  if (this->error_msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.ErrorMsg)
  return target;
}

int ErrorMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.ErrorMsg)
  int total_size = 0;

  // optional bool state = 1;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.ErrorMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ErrorMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.ErrorMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.ErrorMsg)
    MergeFrom(*source);
  }
}

void ErrorMsg::MergeFrom(const ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.ErrorMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void ErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorMsg::CopyFrom(const ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMsg::IsInitialized() const {

  return true;
}

void ErrorMsg::Swap(ErrorMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorMsg::InternalSwap(ErrorMsg* other) {
  std::swap(state_, other->state_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorMsg_descriptor_;
  metadata.reflection = ErrorMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorMsg

// optional bool state = 1;
void ErrorMsg::clear_state() {
  state_ = false;
}
 bool ErrorMsg::state() const {
  // @@protoc_insertion_point(field_get:ik.ErrorMsg.state)
  return state_;
}
 void ErrorMsg::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ik.ErrorMsg.state)
}

// optional bytes error_msg = 2;
void ErrorMsg::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ErrorMsg::error_msg() const {
  // @@protoc_insertion_point(field_get:ik.ErrorMsg.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorMsg::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik.ErrorMsg.error_msg)
}
 void ErrorMsg::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik.ErrorMsg.error_msg)
}
 void ErrorMsg::set_error_msg(const void* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik.ErrorMsg.error_msg)
}
 ::std::string* ErrorMsg::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:ik.ErrorMsg.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ErrorMsg::release_error_msg() {
  // @@protoc_insertion_point(field_release:ik.ErrorMsg.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorMsg::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:ik.ErrorMsg.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogResponse::LogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik.LogResponse)
}

void LogResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  msg_ = const_cast< ::ik::ErrorMsg*>(&::ik::ErrorMsg::default_instance());
}

LogResponse::LogResponse(const LogResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik.LogResponse)
}

void LogResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  msg_ = NULL;
}

LogResponse::~LogResponse() {
  // @@protoc_insertion_point(destructor:ik.LogResponse)
  SharedDtor();
}

void LogResponse::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void LogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogResponse_descriptor_;
}

const LogResponse& LogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogServer_2eproto();
  return *default_instance_;
}

LogResponse* LogResponse::default_instance_ = NULL;

LogResponse* LogResponse::New(::google::protobuf::Arena* arena) const {
  LogResponse* n = new LogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik.LogResponse)
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}

bool LogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik.LogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ik.ErrorMsg msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik.LogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik.LogResponse)
  return false;
#undef DO_
}

void LogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik.LogResponse)
  // optional .ik.ErrorMsg msg = 1;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:ik.LogResponse)
}

::google::protobuf::uint8* LogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik.LogResponse)
  // optional .ik.ErrorMsg msg = 1;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik.LogResponse)
  return target;
}

int LogResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik.LogResponse)
  int total_size = 0;

  // optional .ik.ErrorMsg msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik.LogResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik.LogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik.LogResponse)
    MergeFrom(*source);
  }
}

void LogResponse::MergeFrom(const LogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik.LogResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_msg()) {
    mutable_msg()->::ik::ErrorMsg::MergeFrom(from.msg());
  }
}

void LogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik.LogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogResponse::CopyFrom(const LogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik.LogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogResponse::IsInitialized() const {

  return true;
}

void LogResponse::Swap(LogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogResponse::InternalSwap(LogResponse* other) {
  std::swap(msg_, other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogResponse_descriptor_;
  metadata.reflection = LogResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogResponse

// optional .ik.ErrorMsg msg = 1;
bool LogResponse::has_msg() const {
  return !_is_default_instance_ && msg_ != NULL;
}
void LogResponse::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::ik::ErrorMsg& LogResponse::msg() const {
  // @@protoc_insertion_point(field_get:ik.LogResponse.msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
::ik::ErrorMsg* LogResponse::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::ik::ErrorMsg;
  }
  // @@protoc_insertion_point(field_mutable:ik.LogResponse.msg)
  return msg_;
}
::ik::ErrorMsg* LogResponse::release_msg() {
  // @@protoc_insertion_point(field_release:ik.LogResponse.msg)
  
  ::ik::ErrorMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void LogResponse::set_allocated_msg(::ik::ErrorMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ik.LogResponse.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

LogServerRpc::~LogServerRpc() {}

const ::google::protobuf::ServiceDescriptor* LogServerRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogServerRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* LogServerRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogServerRpc_descriptor_;
}

void LogServerRpc::Log_INFO(::google::protobuf::RpcController* controller,
                         const ::ik::LogRequest*,
                         ::google::protobuf::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Log_INFO() not implemented.");
  done->Run();
}

void LogServerRpc::Log_ERROR(::google::protobuf::RpcController* controller,
                         const ::ik::LogRequest*,
                         ::google::protobuf::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Log_ERROR() not implemented.");
  done->Run();
}

void LogServerRpc::Log_FATAL(::google::protobuf::RpcController* controller,
                         const ::ik::LogRequest*,
                         ::google::protobuf::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Log_FATAL() not implemented.");
  done->Run();
}

void LogServerRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), LogServerRpc_descriptor_);
  switch(method->index()) {
    case 0:
      Log_INFO(controller,
             ::google::protobuf::down_cast<const ::ik::LogRequest*>(request),
             ::google::protobuf::down_cast< ::google::protobuf::Empty*>(response),
             done);
      break;
    case 1:
      Log_ERROR(controller,
             ::google::protobuf::down_cast<const ::ik::LogRequest*>(request),
             ::google::protobuf::down_cast< ::google::protobuf::Empty*>(response),
             done);
      break;
    case 2:
      Log_FATAL(controller,
             ::google::protobuf::down_cast<const ::ik::LogRequest*>(request),
             ::google::protobuf::down_cast< ::google::protobuf::Empty*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& LogServerRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ik::LogRequest::default_instance();
    case 1:
      return ::ik::LogRequest::default_instance();
    case 2:
      return ::ik::LogRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& LogServerRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::google::protobuf::Empty::default_instance();
    case 1:
      return ::google::protobuf::Empty::default_instance();
    case 2:
      return ::google::protobuf::Empty::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

LogServerRpc_Stub::LogServerRpc_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
LogServerRpc_Stub::LogServerRpc_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
LogServerRpc_Stub::~LogServerRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void LogServerRpc_Stub::Log_INFO(::google::protobuf::RpcController* controller,
                              const ::ik::LogRequest* request,
                              ::google::protobuf::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void LogServerRpc_Stub::Log_ERROR(::google::protobuf::RpcController* controller,
                              const ::ik::LogRequest* request,
                              ::google::protobuf::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void LogServerRpc_Stub::Log_FATAL(::google::protobuf::RpcController* controller,
                              const ::ik::LogRequest* request,
                              ::google::protobuf::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace ik

// @@protoc_insertion_point(global_scope)
