// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ik_UserService {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginOutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginOutRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* UserServiceRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_UserService_2eproto() {
  protobuf_AddDesc_UserService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserService.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
  };
  LoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _is_default_instance_));
  ErrorMsg_descriptor_ = file->message_type(1);
  static const int ErrorMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, message_),
  };
  ErrorMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrorMsg_descriptor_,
      ErrorMsg::default_instance_,
      ErrorMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(ErrorMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, _is_default_instance_));
  LoginReponse_descriptor_ = file->message_type(2);
  static const int LoginReponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReponse, msg_),
  };
  LoginReponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginReponse_descriptor_,
      LoginReponse::default_instance_,
      LoginReponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginReponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReponse, _is_default_instance_));
  RegisterRequest_descriptor_ = file->message_type(3);
  static const int RegisterRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, password_),
  };
  RegisterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterRequest_descriptor_,
      RegisterRequest::default_instance_,
      RegisterRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _is_default_instance_));
  RegisterResponse_descriptor_ = file->message_type(4);
  static const int RegisterResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, id_),
  };
  RegisterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterResponse_descriptor_,
      RegisterResponse::default_instance_,
      RegisterResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _is_default_instance_));
  LoginOutRequest_descriptor_ = file->message_type(5);
  static const int LoginOutRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginOutRequest, id_),
  };
  LoginOutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginOutRequest_descriptor_,
      LoginOutRequest::default_instance_,
      LoginOutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginOutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginOutRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginOutRequest, _is_default_instance_));
  UserServiceRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrorMsg_descriptor_, &ErrorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginReponse_descriptor_, &LoginReponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterRequest_descriptor_, &RegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterResponse_descriptor_, &RegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginOutRequest_descriptor_, &LoginOutRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserService_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete ErrorMsg::default_instance_;
  delete ErrorMsg_reflection_;
  delete LoginReponse::default_instance_;
  delete LoginReponse_reflection_;
  delete RegisterRequest::default_instance_;
  delete RegisterRequest_reflection_;
  delete RegisterResponse::default_instance_;
  delete RegisterResponse_reflection_;
  delete LoginOutRequest::default_instance_;
  delete LoginOutRequest_reflection_;
}

void protobuf_AddDesc_UserService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_UserService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021UserService.proto\022\016ik_UserService\032\033goo"
    "gle/protobuf/empty.proto\",\n\014LoginRequest"
    "\022\n\n\002id\030\001 \001(\005\022\020\n\010password\030\002 \001(\014\"\033\n\010ErrorM"
    "sg\022\017\n\007message\030\002 \001(\014\"I\n\014LoginReponse\022\022\n\ni"
    "s_success\030\001 \001(\010\022%\n\003msg\030\002 \001(\0132\030.ik_UserSe"
    "rvice.ErrorMsg\"1\n\017RegisterRequest\022\014\n\004nam"
    "e\030\001 \001(\014\022\020\n\010password\030\002 \001(\014\"2\n\020RegisterRes"
    "ponse\022\022\n\nis_success\030\001 \001(\010\022\n\n\002id\030\002 \001(\005\"\035\n"
    "\017LoginOutRequest\022\n\n\002id\030\001 \001(\0052\350\001\n\016UserSer"
    "viceRpc\022C\n\005Login\022\034.ik_UserService.LoginR"
    "equest\032\034.ik_UserService.LoginReponse\022L\n\007"
    "Registe\022\037.ik_UserService.RegisterRequest"
    "\032 .ik_UserService.RegisterResponse\022C\n\010Lo"
    "ginOut\022\037.ik_UserService.LoginOutRequest\032"
    "\026.google.protobuf.EmptyB\003\200\001\001b\006proto3", 596);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserService.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  ErrorMsg::default_instance_ = new ErrorMsg();
  LoginReponse::default_instance_ = new LoginReponse();
  RegisterRequest::default_instance_ = new RegisterRequest();
  RegisterResponse::default_instance_ = new RegisterResponse();
  LoginOutRequest::default_instance_ = new LoginOutRequest();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  ErrorMsg::default_instance_->InitAsDefaultInstance();
  LoginReponse::default_instance_->InitAsDefaultInstance();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  RegisterResponse::default_instance_->InitAsDefaultInstance();
  LoginOutRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserService_2eproto {
  StaticDescriptorInitializer_UserService_2eproto() {
    protobuf_AddDesc_UserService_2eproto();
  }
} static_descriptor_initializer_UserService_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kIdFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_UserService.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_UserService.LoginRequest)
}

void LoginRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:ik_UserService.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserService_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_UserService.LoginRequest)
  id_ = 0;
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_UserService.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_UserService.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_UserService.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_UserService.LoginRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_UserService.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_UserService.LoginRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_UserService.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_UserService.LoginRequest)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_UserService.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_UserService.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_UserService.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_UserService.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_UserService.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_UserService.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  std::swap(id_, other->id_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional int32 id = 1;
void LoginRequest::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 LoginRequest::id() const {
  // @@protoc_insertion_point(field_get:ik_UserService.LoginRequest.id)
  return id_;
}
 void LoginRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_UserService.LoginRequest.id)
}

// optional bytes password = 2;
void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:ik_UserService.LoginRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_UserService.LoginRequest.password)
}
 void LoginRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_UserService.LoginRequest.password)
}
 void LoginRequest::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_UserService.LoginRequest.password)
}
 ::std::string* LoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ik_UserService.LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:ik_UserService.LoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ik_UserService.LoginRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorMsg::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorMsg::ErrorMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_UserService.ErrorMsg)
}

void ErrorMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ErrorMsg::ErrorMsg(const ErrorMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_UserService.ErrorMsg)
}

void ErrorMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ErrorMsg::~ErrorMsg() {
  // @@protoc_insertion_point(destructor:ik_UserService.ErrorMsg)
  SharedDtor();
}

void ErrorMsg::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorMsg_descriptor_;
}

const ErrorMsg& ErrorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserService_2eproto();
  return *default_instance_;
}

ErrorMsg* ErrorMsg::default_instance_ = NULL;

ErrorMsg* ErrorMsg::New(::google::protobuf::Arena* arena) const {
  ErrorMsg* n = new ErrorMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_UserService.ErrorMsg)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_UserService.ErrorMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_UserService.ErrorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_UserService.ErrorMsg)
  return false;
#undef DO_
}

void ErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_UserService.ErrorMsg)
  // optional bytes message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_UserService.ErrorMsg)
}

::google::protobuf::uint8* ErrorMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_UserService.ErrorMsg)
  // optional bytes message = 2;
  if (this->message().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_UserService.ErrorMsg)
  return target;
}

int ErrorMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_UserService.ErrorMsg)
  int total_size = 0;

  // optional bytes message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_UserService.ErrorMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ErrorMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_UserService.ErrorMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_UserService.ErrorMsg)
    MergeFrom(*source);
  }
}

void ErrorMsg::MergeFrom(const ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_UserService.ErrorMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_UserService.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorMsg::CopyFrom(const ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_UserService.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMsg::IsInitialized() const {

  return true;
}

void ErrorMsg::Swap(ErrorMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorMsg::InternalSwap(ErrorMsg* other) {
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorMsg_descriptor_;
  metadata.reflection = ErrorMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorMsg

// optional bytes message = 2;
void ErrorMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ErrorMsg::message() const {
  // @@protoc_insertion_point(field_get:ik_UserService.ErrorMsg.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorMsg::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_UserService.ErrorMsg.message)
}
 void ErrorMsg::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_UserService.ErrorMsg.message)
}
 void ErrorMsg::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_UserService.ErrorMsg.message)
}
 ::std::string* ErrorMsg::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ik_UserService.ErrorMsg.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ErrorMsg::release_message() {
  // @@protoc_insertion_point(field_release:ik_UserService.ErrorMsg.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorMsg::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ik_UserService.ErrorMsg.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReponse::kIsSuccessFieldNumber;
const int LoginReponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReponse::LoginReponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_UserService.LoginReponse)
}

void LoginReponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  msg_ = const_cast< ::ik_UserService::ErrorMsg*>(&::ik_UserService::ErrorMsg::default_instance());
}

LoginReponse::LoginReponse(const LoginReponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_UserService.LoginReponse)
}

void LoginReponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_success_ = false;
  msg_ = NULL;
}

LoginReponse::~LoginReponse() {
  // @@protoc_insertion_point(destructor:ik_UserService.LoginReponse)
  SharedDtor();
}

void LoginReponse::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void LoginReponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReponse_descriptor_;
}

const LoginReponse& LoginReponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserService_2eproto();
  return *default_instance_;
}

LoginReponse* LoginReponse::default_instance_ = NULL;

LoginReponse* LoginReponse::New(::google::protobuf::Arena* arena) const {
  LoginReponse* n = new LoginReponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_UserService.LoginReponse)
  is_success_ = false;
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}

bool LoginReponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_UserService.LoginReponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional .ik_UserService.ErrorMsg msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_UserService.LoginReponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_UserService.LoginReponse)
  return false;
#undef DO_
}

void LoginReponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_UserService.LoginReponse)
  // optional bool is_success = 1;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }

  // optional .ik_UserService.ErrorMsg msg = 2;
  if (this->has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:ik_UserService.LoginReponse)
}

::google::protobuf::uint8* LoginReponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_UserService.LoginReponse)
  // optional bool is_success = 1;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }

  // optional .ik_UserService.ErrorMsg msg = 2;
  if (this->has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->msg_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_UserService.LoginReponse)
  return target;
}

int LoginReponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_UserService.LoginReponse)
  int total_size = 0;

  // optional bool is_success = 1;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // optional .ik_UserService.ErrorMsg msg = 2;
  if (this->has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_UserService.LoginReponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginReponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_UserService.LoginReponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_UserService.LoginReponse)
    MergeFrom(*source);
  }
}

void LoginReponse::MergeFrom(const LoginReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_UserService.LoginReponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.has_msg()) {
    mutable_msg()->::ik_UserService::ErrorMsg::MergeFrom(from.msg());
  }
}

void LoginReponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_UserService.LoginReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReponse::CopyFrom(const LoginReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_UserService.LoginReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReponse::IsInitialized() const {

  return true;
}

void LoginReponse::Swap(LoginReponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReponse::InternalSwap(LoginReponse* other) {
  std::swap(is_success_, other->is_success_);
  std::swap(msg_, other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReponse_descriptor_;
  metadata.reflection = LoginReponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReponse

// optional bool is_success = 1;
void LoginReponse::clear_is_success() {
  is_success_ = false;
}
 bool LoginReponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_UserService.LoginReponse.is_success)
  return is_success_;
}
 void LoginReponse::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:ik_UserService.LoginReponse.is_success)
}

// optional .ik_UserService.ErrorMsg msg = 2;
bool LoginReponse::has_msg() const {
  return !_is_default_instance_ && msg_ != NULL;
}
void LoginReponse::clear_msg() {
  if (GetArenaNoVirtual() == NULL && msg_ != NULL) delete msg_;
  msg_ = NULL;
}
const ::ik_UserService::ErrorMsg& LoginReponse::msg() const {
  // @@protoc_insertion_point(field_get:ik_UserService.LoginReponse.msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
::ik_UserService::ErrorMsg* LoginReponse::mutable_msg() {
  
  if (msg_ == NULL) {
    msg_ = new ::ik_UserService::ErrorMsg;
  }
  // @@protoc_insertion_point(field_mutable:ik_UserService.LoginReponse.msg)
  return msg_;
}
::ik_UserService::ErrorMsg* LoginReponse::release_msg() {
  // @@protoc_insertion_point(field_release:ik_UserService.LoginReponse.msg)
  
  ::ik_UserService::ErrorMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void LoginReponse::set_allocated_msg(::ik_UserService::ErrorMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ik_UserService.LoginReponse.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequest::kNameFieldNumber;
const int RegisterRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_UserService.RegisterRequest)
}

void RegisterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_UserService.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:ik_UserService.RegisterRequest)
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRequest_descriptor_;
}

const RegisterRequest& RegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserService_2eproto();
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New(::google::protobuf::Arena* arena) const {
  RegisterRequest* n = new RegisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_UserService.RegisterRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_UserService.RegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_UserService.RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_UserService.RegisterRequest)
  return false;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_UserService.RegisterRequest)
  // optional bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_UserService.RegisterRequest)
}

::google::protobuf::uint8* RegisterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_UserService.RegisterRequest)
  // optional bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_UserService.RegisterRequest)
  return target;
}

int RegisterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_UserService.RegisterRequest)
  int total_size = 0;

  // optional bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_UserService.RegisterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_UserService.RegisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_UserService.RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_UserService.RegisterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_UserService.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_UserService.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequest::InternalSwap(RegisterRequest* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRequest_descriptor_;
  metadata.reflection = RegisterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRequest

// optional bytes name = 1;
void RegisterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:ik_UserService.RegisterRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_UserService.RegisterRequest.name)
}
 void RegisterRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_UserService.RegisterRequest.name)
}
 void RegisterRequest::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_UserService.RegisterRequest.name)
}
 ::std::string* RegisterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ik_UserService.RegisterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:ik_UserService.RegisterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ik_UserService.RegisterRequest.name)
}

// optional bytes password = 2;
void RegisterRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::password() const {
  // @@protoc_insertion_point(field_get:ik_UserService.RegisterRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_UserService.RegisterRequest.password)
}
 void RegisterRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_UserService.RegisterRequest.password)
}
 void RegisterRequest::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_UserService.RegisterRequest.password)
}
 ::std::string* RegisterRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ik_UserService.RegisterRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_password() {
  // @@protoc_insertion_point(field_release:ik_UserService.RegisterRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ik_UserService.RegisterRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponse::kIsSuccessFieldNumber;
const int RegisterResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponse::RegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_UserService.RegisterResponse)
}

void RegisterResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_UserService.RegisterResponse)
}

void RegisterResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_success_ = false;
  id_ = 0;
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:ik_UserService.RegisterResponse)
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterResponse_descriptor_;
}

const RegisterResponse& RegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserService_2eproto();
  return *default_instance_;
}

RegisterResponse* RegisterResponse::default_instance_ = NULL;

RegisterResponse* RegisterResponse::New(::google::protobuf::Arena* arena) const {
  RegisterResponse* n = new RegisterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_UserService.RegisterResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegisterResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegisterResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_success_, id_);

#undef ZR_HELPER_
#undef ZR_

}

bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_UserService.RegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_UserService.RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_UserService.RegisterResponse)
  return false;
#undef DO_
}

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_UserService.RegisterResponse)
  // optional bool is_success = 1;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_UserService.RegisterResponse)
}

::google::protobuf::uint8* RegisterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_UserService.RegisterResponse)
  // optional bool is_success = 1;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_UserService.RegisterResponse)
  return target;
}

int RegisterResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_UserService.RegisterResponse)
  int total_size = 0;

  // optional bool is_success = 1;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_UserService.RegisterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_UserService.RegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_UserService.RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_UserService.RegisterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_UserService.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_UserService.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {

  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponse::InternalSwap(RegisterResponse* other) {
  std::swap(is_success_, other->is_success_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterResponse_descriptor_;
  metadata.reflection = RegisterResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterResponse

// optional bool is_success = 1;
void RegisterResponse::clear_is_success() {
  is_success_ = false;
}
 bool RegisterResponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_UserService.RegisterResponse.is_success)
  return is_success_;
}
 void RegisterResponse::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:ik_UserService.RegisterResponse.is_success)
}

// optional int32 id = 2;
void RegisterResponse::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 RegisterResponse::id() const {
  // @@protoc_insertion_point(field_get:ik_UserService.RegisterResponse.id)
  return id_;
}
 void RegisterResponse::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_UserService.RegisterResponse.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginOutRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginOutRequest::LoginOutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_UserService.LoginOutRequest)
}

void LoginOutRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginOutRequest::LoginOutRequest(const LoginOutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_UserService.LoginOutRequest)
}

void LoginOutRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
}

LoginOutRequest::~LoginOutRequest() {
  // @@protoc_insertion_point(destructor:ik_UserService.LoginOutRequest)
  SharedDtor();
}

void LoginOutRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginOutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginOutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginOutRequest_descriptor_;
}

const LoginOutRequest& LoginOutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserService_2eproto();
  return *default_instance_;
}

LoginOutRequest* LoginOutRequest::default_instance_ = NULL;

LoginOutRequest* LoginOutRequest::New(::google::protobuf::Arena* arena) const {
  LoginOutRequest* n = new LoginOutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginOutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_UserService.LoginOutRequest)
  id_ = 0;
}

bool LoginOutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_UserService.LoginOutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_UserService.LoginOutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_UserService.LoginOutRequest)
  return false;
#undef DO_
}

void LoginOutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_UserService.LoginOutRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_UserService.LoginOutRequest)
}

::google::protobuf::uint8* LoginOutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_UserService.LoginOutRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_UserService.LoginOutRequest)
  return target;
}

int LoginOutRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_UserService.LoginOutRequest)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginOutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_UserService.LoginOutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginOutRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginOutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_UserService.LoginOutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_UserService.LoginOutRequest)
    MergeFrom(*source);
  }
}

void LoginOutRequest::MergeFrom(const LoginOutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_UserService.LoginOutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void LoginOutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_UserService.LoginOutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginOutRequest::CopyFrom(const LoginOutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_UserService.LoginOutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginOutRequest::IsInitialized() const {

  return true;
}

void LoginOutRequest::Swap(LoginOutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginOutRequest::InternalSwap(LoginOutRequest* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginOutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginOutRequest_descriptor_;
  metadata.reflection = LoginOutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginOutRequest

// optional int32 id = 1;
void LoginOutRequest::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 LoginOutRequest::id() const {
  // @@protoc_insertion_point(field_get:ik_UserService.LoginOutRequest.id)
  return id_;
}
 void LoginOutRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_UserService.LoginOutRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

UserServiceRpc::~UserServiceRpc() {}

const ::google::protobuf::ServiceDescriptor* UserServiceRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserServiceRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* UserServiceRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserServiceRpc_descriptor_;
}

void UserServiceRpc::Login(::google::protobuf::RpcController* controller,
                         const ::ik_UserService::LoginRequest*,
                         ::ik_UserService::LoginReponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Login() not implemented.");
  done->Run();
}

void UserServiceRpc::Registe(::google::protobuf::RpcController* controller,
                         const ::ik_UserService::RegisterRequest*,
                         ::ik_UserService::RegisterResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Registe() not implemented.");
  done->Run();
}

void UserServiceRpc::LoginOut(::google::protobuf::RpcController* controller,
                         const ::ik_UserService::LoginOutRequest*,
                         ::google::protobuf::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LoginOut() not implemented.");
  done->Run();
}

void UserServiceRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), UserServiceRpc_descriptor_);
  switch(method->index()) {
    case 0:
      Login(controller,
             ::google::protobuf::down_cast<const ::ik_UserService::LoginRequest*>(request),
             ::google::protobuf::down_cast< ::ik_UserService::LoginReponse*>(response),
             done);
      break;
    case 1:
      Registe(controller,
             ::google::protobuf::down_cast<const ::ik_UserService::RegisterRequest*>(request),
             ::google::protobuf::down_cast< ::ik_UserService::RegisterResponse*>(response),
             done);
      break;
    case 2:
      LoginOut(controller,
             ::google::protobuf::down_cast<const ::ik_UserService::LoginOutRequest*>(request),
             ::google::protobuf::down_cast< ::google::protobuf::Empty*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& UserServiceRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ik_UserService::LoginRequest::default_instance();
    case 1:
      return ::ik_UserService::RegisterRequest::default_instance();
    case 2:
      return ::ik_UserService::LoginOutRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& UserServiceRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ik_UserService::LoginReponse::default_instance();
    case 1:
      return ::ik_UserService::RegisterResponse::default_instance();
    case 2:
      return ::google::protobuf::Empty::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserServiceRpc_Stub::UserServiceRpc_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserServiceRpc_Stub::UserServiceRpc_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
UserServiceRpc_Stub::~UserServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void UserServiceRpc_Stub::Login(::google::protobuf::RpcController* controller,
                              const ::ik_UserService::LoginRequest* request,
                              ::ik_UserService::LoginReponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserServiceRpc_Stub::Registe(::google::protobuf::RpcController* controller,
                              const ::ik_UserService::RegisterRequest* request,
                              ::ik_UserService::RegisterResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UserServiceRpc_Stub::LoginOut(::google::protobuf::RpcController* controller,
                              const ::ik_UserService::LoginOutRequest* request,
                              ::google::protobuf::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_UserService

// @@protoc_insertion_point(global_scope)
