// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ik_FriendService {

namespace {

const ::google::protobuf::Descriptor* UserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoReponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoReponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFriendRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* FriendServiceRpc_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_FriendService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_FriendService_2eproto() {
  protobuf_AddDesc_FriendService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FriendService.proto");
  GOOGLE_CHECK(file != NULL);
  UserInfoRequest_descriptor_ = file->message_type(0);
  static const int UserInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRequest, id_),
  };
  UserInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfoRequest_descriptor_,
      UserInfoRequest::default_instance_,
      UserInfoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoRequest, _is_default_instance_));
  UserInfoReponse_descriptor_ = file->message_type(1);
  static const int UserInfoReponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReponse, name_),
  };
  UserInfoReponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfoReponse_descriptor_,
      UserInfoReponse::default_instance_,
      UserInfoReponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfoReponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReponse, _is_default_instance_));
  FriendInfo_descriptor_ = file->message_type(2);
  static const int FriendInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, name_),
  };
  FriendInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::default_instance_,
      FriendInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(FriendInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _is_default_instance_));
  FriendListRequest_descriptor_ = file->message_type(3);
  static const int FriendListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListRequest, id_),
  };
  FriendListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendListRequest_descriptor_,
      FriendListRequest::default_instance_,
      FriendListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FriendListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListRequest, _is_default_instance_));
  FriendListResponse_descriptor_ = file->message_type(4);
  static const int FriendListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListResponse, friends_),
  };
  FriendListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendListResponse_descriptor_,
      FriendListResponse::default_instance_,
      FriendListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(FriendListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListResponse, _is_default_instance_));
  AddFriendRequest_descriptor_ = file->message_type(5);
  static const int AddFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, myid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, friendid_),
  };
  AddFriendRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFriendRequest_descriptor_,
      AddFriendRequest::default_instance_,
      AddFriendRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddFriendRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRequest, _is_default_instance_));
  DeleteFriendRequest_descriptor_ = file->message_type(6);
  static const int DeleteFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, myid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, friendid_),
  };
  DeleteFriendRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteFriendRequest_descriptor_,
      DeleteFriendRequest::default_instance_,
      DeleteFriendRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteFriendRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, _is_default_instance_));
  FriendServiceRpc_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FriendService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfoRequest_descriptor_, &UserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfoReponse_descriptor_, &UserInfoReponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendInfo_descriptor_, &FriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendListRequest_descriptor_, &FriendListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendListResponse_descriptor_, &FriendListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFriendRequest_descriptor_, &AddFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteFriendRequest_descriptor_, &DeleteFriendRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FriendService_2eproto() {
  delete UserInfoRequest::default_instance_;
  delete UserInfoRequest_reflection_;
  delete UserInfoReponse::default_instance_;
  delete UserInfoReponse_reflection_;
  delete FriendInfo::default_instance_;
  delete FriendInfo_reflection_;
  delete FriendListRequest::default_instance_;
  delete FriendListRequest_reflection_;
  delete FriendListResponse::default_instance_;
  delete FriendListResponse_reflection_;
  delete AddFriendRequest::default_instance_;
  delete AddFriendRequest_reflection_;
  delete DeleteFriendRequest::default_instance_;
  delete DeleteFriendRequest_reflection_;
}

void protobuf_AddDesc_FriendService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_FriendService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023FriendService.proto\022\020ik_FriendService\032"
    "\033google/protobuf/empty.proto\"\035\n\017UserInfo"
    "Request\022\n\n\002id\030\001 \001(\005\"+\n\017UserInfoReponse\022\n"
    "\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\"&\n\nFriendInfo\022\n"
    "\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\"\037\n\021FriendListRe"
    "quest\022\n\n\002id\030\001 \001(\005\"W\n\022FriendListResponse\022"
    "\022\n\nis_success\030\001 \001(\010\022-\n\007friends\030\002 \003(\0132\034.i"
    "k_FriendService.FriendInfo\"2\n\020AddFriendR"
    "equest\022\014\n\004myid\030\001 \001(\005\022\020\n\010friendid\030\002 \001(\005\"5"
    "\n\023DeleteFriendRequest\022\014\n\004myid\030\001 \001(\005\022\020\n\010f"
    "riendid\030\002 \001(\0052\333\002\n\020FriendServiceRpc\022Z\n\rGe"
    "tFriendList\022#.ik_FriendService.FriendLis"
    "tRequest\032$.ik_FriendService.FriendListRe"
    "sponse\022S\n\013GetUserInfo\022!.ik_FriendService"
    ".UserInfoRequest\032!.ik_FriendService.User"
    "InfoReponse\022G\n\tAddFriend\022\".ik_FriendServ"
    "ice.AddFriendRequest\032\026.google.protobuf.E"
    "mpty\022M\n\014DeleteFriend\022%.ik_FriendService."
    "DeleteFriendRequest\032\026.google.protobuf.Em"
    "ptyB\003\200\001\001b\006proto3", 776);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FriendService.proto", &protobuf_RegisterTypes);
  UserInfoRequest::default_instance_ = new UserInfoRequest();
  UserInfoReponse::default_instance_ = new UserInfoReponse();
  FriendInfo::default_instance_ = new FriendInfo();
  FriendListRequest::default_instance_ = new FriendListRequest();
  FriendListResponse::default_instance_ = new FriendListResponse();
  AddFriendRequest::default_instance_ = new AddFriendRequest();
  DeleteFriendRequest::default_instance_ = new DeleteFriendRequest();
  UserInfoRequest::default_instance_->InitAsDefaultInstance();
  UserInfoReponse::default_instance_->InitAsDefaultInstance();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  FriendListRequest::default_instance_->InitAsDefaultInstance();
  FriendListResponse::default_instance_->InitAsDefaultInstance();
  AddFriendRequest::default_instance_->InitAsDefaultInstance();
  DeleteFriendRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FriendService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FriendService_2eproto {
  StaticDescriptorInitializer_FriendService_2eproto() {
    protobuf_AddDesc_FriendService_2eproto();
  }
} static_descriptor_initializer_FriendService_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfoRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfoRequest::UserInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_FriendService.UserInfoRequest)
}

void UserInfoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserInfoRequest::UserInfoRequest(const UserInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.UserInfoRequest)
}

void UserInfoRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
}

UserInfoRequest::~UserInfoRequest() {
  // @@protoc_insertion_point(destructor:ik_FriendService.UserInfoRequest)
  SharedDtor();
}

void UserInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoRequest_descriptor_;
}

const UserInfoRequest& UserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendService_2eproto();
  return *default_instance_;
}

UserInfoRequest* UserInfoRequest::default_instance_ = NULL;

UserInfoRequest* UserInfoRequest::New(::google::protobuf::Arena* arena) const {
  UserInfoRequest* n = new UserInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.UserInfoRequest)
  id_ = 0;
}

bool UserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_FriendService.UserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_FriendService.UserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_FriendService.UserInfoRequest)
  return false;
#undef DO_
}

void UserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_FriendService.UserInfoRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_FriendService.UserInfoRequest)
}

::google::protobuf::uint8* UserInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.UserInfoRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.UserInfoRequest)
  return target;
}

int UserInfoRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.UserInfoRequest)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_FriendService.UserInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserInfoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_FriendService.UserInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_FriendService.UserInfoRequest)
    MergeFrom(*source);
  }
}

void UserInfoRequest::MergeFrom(const UserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.UserInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void UserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_FriendService.UserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoRequest::CopyFrom(const UserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.UserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoRequest::IsInitialized() const {

  return true;
}

void UserInfoRequest::Swap(UserInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfoRequest::InternalSwap(UserInfoRequest* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoRequest_descriptor_;
  metadata.reflection = UserInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfoRequest

// optional int32 id = 1;
void UserInfoRequest::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 UserInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.UserInfoRequest.id)
  return id_;
}
 void UserInfoRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.UserInfoRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfoReponse::kIdFieldNumber;
const int UserInfoReponse::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfoReponse::UserInfoReponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_FriendService.UserInfoReponse)
}

void UserInfoReponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserInfoReponse::UserInfoReponse(const UserInfoReponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.UserInfoReponse)
}

void UserInfoReponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserInfoReponse::~UserInfoReponse() {
  // @@protoc_insertion_point(destructor:ik_FriendService.UserInfoReponse)
  SharedDtor();
}

void UserInfoReponse::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserInfoReponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoReponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoReponse_descriptor_;
}

const UserInfoReponse& UserInfoReponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendService_2eproto();
  return *default_instance_;
}

UserInfoReponse* UserInfoReponse::default_instance_ = NULL;

UserInfoReponse* UserInfoReponse::New(::google::protobuf::Arena* arena) const {
  UserInfoReponse* n = new UserInfoReponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfoReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.UserInfoReponse)
  id_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserInfoReponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_FriendService.UserInfoReponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_FriendService.UserInfoReponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_FriendService.UserInfoReponse)
  return false;
#undef DO_
}

void UserInfoReponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_FriendService.UserInfoReponse)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_FriendService.UserInfoReponse)
}

::google::protobuf::uint8* UserInfoReponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.UserInfoReponse)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.UserInfoReponse)
  return target;
}

int UserInfoReponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.UserInfoReponse)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoReponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_FriendService.UserInfoReponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserInfoReponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfoReponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_FriendService.UserInfoReponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_FriendService.UserInfoReponse)
    MergeFrom(*source);
  }
}

void UserInfoReponse::MergeFrom(const UserInfoReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.UserInfoReponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void UserInfoReponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_FriendService.UserInfoReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoReponse::CopyFrom(const UserInfoReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.UserInfoReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoReponse::IsInitialized() const {

  return true;
}

void UserInfoReponse::Swap(UserInfoReponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfoReponse::InternalSwap(UserInfoReponse* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfoReponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoReponse_descriptor_;
  metadata.reflection = UserInfoReponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfoReponse

// optional int32 id = 1;
void UserInfoReponse::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 UserInfoReponse::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.UserInfoReponse.id)
  return id_;
}
 void UserInfoReponse::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.UserInfoReponse.id)
}

// optional bytes name = 2;
void UserInfoReponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfoReponse::name() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.UserInfoReponse.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfoReponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_FriendService.UserInfoReponse.name)
}
 void UserInfoReponse::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_FriendService.UserInfoReponse.name)
}
 void UserInfoReponse::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_FriendService.UserInfoReponse.name)
}
 ::std::string* UserInfoReponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ik_FriendService.UserInfoReponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfoReponse::release_name() {
  // @@protoc_insertion_point(field_release:ik_FriendService.UserInfoReponse.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfoReponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ik_FriendService.UserInfoReponse.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendInfo::kIdFieldNumber;
const int FriendInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendInfo::FriendInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_FriendService.FriendInfo)
}

void FriendInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.FriendInfo)
}

void FriendInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:ik_FriendService.FriendInfo)
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendService_2eproto();
  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New(::google::protobuf::Arena* arena) const {
  FriendInfo* n = new FriendInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.FriendInfo)
  id_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_FriendService.FriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_FriendService.FriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_FriendService.FriendInfo)
  return false;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_FriendService.FriendInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_FriendService.FriendInfo)
}

::google::protobuf::uint8* FriendInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.FriendInfo)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.FriendInfo)
  return target;
}

int FriendInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.FriendInfo)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_FriendService.FriendInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FriendInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_FriendService.FriendInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_FriendService.FriendInfo)
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.FriendInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_FriendService.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {

  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendInfo::InternalSwap(FriendInfo* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendInfo

// optional int32 id = 1;
void FriendInfo::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 FriendInfo::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendInfo.id)
  return id_;
}
 void FriendInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendInfo.id)
}

// optional bytes name = 2;
void FriendInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FriendInfo::name() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendInfo.name)
}
 void FriendInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ik_FriendService.FriendInfo.name)
}
 void FriendInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ik_FriendService.FriendInfo.name)
}
 ::std::string* FriendInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ik_FriendService.FriendInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FriendInfo::release_name() {
  // @@protoc_insertion_point(field_release:ik_FriendService.FriendInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FriendInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ik_FriendService.FriendInfo.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendListRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendListRequest::FriendListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_FriendService.FriendListRequest)
}

void FriendListRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FriendListRequest::FriendListRequest(const FriendListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.FriendListRequest)
}

void FriendListRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
}

FriendListRequest::~FriendListRequest() {
  // @@protoc_insertion_point(destructor:ik_FriendService.FriendListRequest)
  SharedDtor();
}

void FriendListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendListRequest_descriptor_;
}

const FriendListRequest& FriendListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendService_2eproto();
  return *default_instance_;
}

FriendListRequest* FriendListRequest::default_instance_ = NULL;

FriendListRequest* FriendListRequest::New(::google::protobuf::Arena* arena) const {
  FriendListRequest* n = new FriendListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.FriendListRequest)
  id_ = 0;
}

bool FriendListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_FriendService.FriendListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_FriendService.FriendListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_FriendService.FriendListRequest)
  return false;
#undef DO_
}

void FriendListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_FriendService.FriendListRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_FriendService.FriendListRequest)
}

::google::protobuf::uint8* FriendListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.FriendListRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.FriendListRequest)
  return target;
}

int FriendListRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.FriendListRequest)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_FriendService.FriendListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FriendListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_FriendService.FriendListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_FriendService.FriendListRequest)
    MergeFrom(*source);
  }
}

void FriendListRequest::MergeFrom(const FriendListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.FriendListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void FriendListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_FriendService.FriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListRequest::CopyFrom(const FriendListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.FriendListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListRequest::IsInitialized() const {

  return true;
}

void FriendListRequest::Swap(FriendListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendListRequest::InternalSwap(FriendListRequest* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendListRequest_descriptor_;
  metadata.reflection = FriendListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendListRequest

// optional int32 id = 1;
void FriendListRequest::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 FriendListRequest::id() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendListRequest.id)
  return id_;
}
 void FriendListRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendListRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendListResponse::kIsSuccessFieldNumber;
const int FriendListResponse::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendListResponse::FriendListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_FriendService.FriendListResponse)
}

void FriendListResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FriendListResponse::FriendListResponse(const FriendListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.FriendListResponse)
}

void FriendListResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_success_ = false;
}

FriendListResponse::~FriendListResponse() {
  // @@protoc_insertion_point(destructor:ik_FriendService.FriendListResponse)
  SharedDtor();
}

void FriendListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendListResponse_descriptor_;
}

const FriendListResponse& FriendListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendService_2eproto();
  return *default_instance_;
}

FriendListResponse* FriendListResponse::default_instance_ = NULL;

FriendListResponse* FriendListResponse::New(::google::protobuf::Arena* arena) const {
  FriendListResponse* n = new FriendListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.FriendListResponse)
  is_success_ = false;
  friends_.Clear();
}

bool FriendListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_FriendService.FriendListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated .ik_FriendService.FriendInfo friends = 2;
      case 2: {
        if (tag == 18) {
         parse_friends:
          DO_(input->IncrementRecursionDepth());
         parse_loop_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_friends;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_FriendService.FriendListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_FriendService.FriendListResponse)
  return false;
#undef DO_
}

void FriendListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_FriendService.FriendListResponse)
  // optional bool is_success = 1;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }

  // repeated .ik_FriendService.FriendInfo friends = 2;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_FriendService.FriendListResponse)
}

::google::protobuf::uint8* FriendListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.FriendListResponse)
  // optional bool is_success = 1;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }

  // repeated .ik_FriendService.FriendInfo friends = 2;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->friends(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.FriendListResponse)
  return target;
}

int FriendListResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.FriendListResponse)
  int total_size = 0;

  // optional bool is_success = 1;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // repeated .ik_FriendService.FriendInfo friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_FriendService.FriendListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FriendListResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_FriendService.FriendListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_FriendService.FriendListResponse)
    MergeFrom(*source);
  }
}

void FriendListResponse::MergeFrom(const FriendListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.FriendListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  friends_.MergeFrom(from.friends_);
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
}

void FriendListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_FriendService.FriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendListResponse::CopyFrom(const FriendListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.FriendListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendListResponse::IsInitialized() const {

  return true;
}

void FriendListResponse::Swap(FriendListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendListResponse::InternalSwap(FriendListResponse* other) {
  std::swap(is_success_, other->is_success_);
  friends_.UnsafeArenaSwap(&other->friends_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendListResponse_descriptor_;
  metadata.reflection = FriendListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendListResponse

// optional bool is_success = 1;
void FriendListResponse::clear_is_success() {
  is_success_ = false;
}
 bool FriendListResponse::is_success() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendListResponse.is_success)
  return is_success_;
}
 void FriendListResponse::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.FriendListResponse.is_success)
}

// repeated .ik_FriendService.FriendInfo friends = 2;
int FriendListResponse::friends_size() const {
  return friends_.size();
}
void FriendListResponse::clear_friends() {
  friends_.Clear();
}
const ::ik_FriendService::FriendInfo& FriendListResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:ik_FriendService.FriendListResponse.friends)
  return friends_.Get(index);
}
::ik_FriendService::FriendInfo* FriendListResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:ik_FriendService.FriendListResponse.friends)
  return friends_.Mutable(index);
}
::ik_FriendService::FriendInfo* FriendListResponse::add_friends() {
  // @@protoc_insertion_point(field_add:ik_FriendService.FriendListResponse.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::ik_FriendService::FriendInfo >*
FriendListResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:ik_FriendService.FriendListResponse.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::ik_FriendService::FriendInfo >&
FriendListResponse::friends() const {
  // @@protoc_insertion_point(field_list:ik_FriendService.FriendListResponse.friends)
  return friends_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendRequest::kMyidFieldNumber;
const int AddFriendRequest::kFriendidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendRequest::AddFriendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_FriendService.AddFriendRequest)
}

void AddFriendRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddFriendRequest::AddFriendRequest(const AddFriendRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.AddFriendRequest)
}

void AddFriendRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  myid_ = 0;
  friendid_ = 0;
}

AddFriendRequest::~AddFriendRequest() {
  // @@protoc_insertion_point(destructor:ik_FriendService.AddFriendRequest)
  SharedDtor();
}

void AddFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendRequest_descriptor_;
}

const AddFriendRequest& AddFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendService_2eproto();
  return *default_instance_;
}

AddFriendRequest* AddFriendRequest::default_instance_ = NULL;

AddFriendRequest* AddFriendRequest::New(::google::protobuf::Arena* arena) const {
  AddFriendRequest* n = new AddFriendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.AddFriendRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AddFriendRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddFriendRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(myid_, friendid_);

#undef ZR_HELPER_
#undef ZR_

}

bool AddFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_FriendService.AddFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 myid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friendid;
        break;
      }

      // optional int32 friendid = 2;
      case 2: {
        if (tag == 16) {
         parse_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_FriendService.AddFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_FriendService.AddFriendRequest)
  return false;
#undef DO_
}

void AddFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_FriendService.AddFriendRequest)
  // optional int32 myid = 1;
  if (this->myid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->myid(), output);
  }

  // optional int32 friendid = 2;
  if (this->friendid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friendid(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_FriendService.AddFriendRequest)
}

::google::protobuf::uint8* AddFriendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.AddFriendRequest)
  // optional int32 myid = 1;
  if (this->myid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->myid(), target);
  }

  // optional int32 friendid = 2;
  if (this->friendid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friendid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.AddFriendRequest)
  return target;
}

int AddFriendRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.AddFriendRequest)
  int total_size = 0;

  // optional int32 myid = 1;
  if (this->myid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->myid());
  }

  // optional int32 friendid = 2;
  if (this->friendid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friendid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_FriendService.AddFriendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AddFriendRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_FriendService.AddFriendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_FriendService.AddFriendRequest)
    MergeFrom(*source);
  }
}

void AddFriendRequest::MergeFrom(const AddFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.AddFriendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.myid() != 0) {
    set_myid(from.myid());
  }
  if (from.friendid() != 0) {
    set_friendid(from.friendid());
  }
}

void AddFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_FriendService.AddFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRequest::CopyFrom(const AddFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.AddFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRequest::IsInitialized() const {

  return true;
}

void AddFriendRequest::Swap(AddFriendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendRequest::InternalSwap(AddFriendRequest* other) {
  std::swap(myid_, other->myid_);
  std::swap(friendid_, other->friendid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendRequest_descriptor_;
  metadata.reflection = AddFriendRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFriendRequest

// optional int32 myid = 1;
void AddFriendRequest::clear_myid() {
  myid_ = 0;
}
 ::google::protobuf::int32 AddFriendRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.AddFriendRequest.myid)
  return myid_;
}
 void AddFriendRequest::set_myid(::google::protobuf::int32 value) {
  
  myid_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.AddFriendRequest.myid)
}

// optional int32 friendid = 2;
void AddFriendRequest::clear_friendid() {
  friendid_ = 0;
}
 ::google::protobuf::int32 AddFriendRequest::friendid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.AddFriendRequest.friendid)
  return friendid_;
}
 void AddFriendRequest::set_friendid(::google::protobuf::int32 value) {
  
  friendid_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.AddFriendRequest.friendid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteFriendRequest::kMyidFieldNumber;
const int DeleteFriendRequest::kFriendidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteFriendRequest::DeleteFriendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ik_FriendService.DeleteFriendRequest)
}

void DeleteFriendRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteFriendRequest::DeleteFriendRequest(const DeleteFriendRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ik_FriendService.DeleteFriendRequest)
}

void DeleteFriendRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  myid_ = 0;
  friendid_ = 0;
}

DeleteFriendRequest::~DeleteFriendRequest() {
  // @@protoc_insertion_point(destructor:ik_FriendService.DeleteFriendRequest)
  SharedDtor();
}

void DeleteFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFriendRequest_descriptor_;
}

const DeleteFriendRequest& DeleteFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendService_2eproto();
  return *default_instance_;
}

DeleteFriendRequest* DeleteFriendRequest::default_instance_ = NULL;

DeleteFriendRequest* DeleteFriendRequest::New(::google::protobuf::Arena* arena) const {
  DeleteFriendRequest* n = new DeleteFriendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ik_FriendService.DeleteFriendRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeleteFriendRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeleteFriendRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(myid_, friendid_);

#undef ZR_HELPER_
#undef ZR_

}

bool DeleteFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ik_FriendService.DeleteFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 myid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friendid;
        break;
      }

      // optional int32 friendid = 2;
      case 2: {
        if (tag == 16) {
         parse_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ik_FriendService.DeleteFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ik_FriendService.DeleteFriendRequest)
  return false;
#undef DO_
}

void DeleteFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ik_FriendService.DeleteFriendRequest)
  // optional int32 myid = 1;
  if (this->myid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->myid(), output);
  }

  // optional int32 friendid = 2;
  if (this->friendid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friendid(), output);
  }

  // @@protoc_insertion_point(serialize_end:ik_FriendService.DeleteFriendRequest)
}

::google::protobuf::uint8* DeleteFriendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ik_FriendService.DeleteFriendRequest)
  // optional int32 myid = 1;
  if (this->myid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->myid(), target);
  }

  // optional int32 friendid = 2;
  if (this->friendid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friendid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ik_FriendService.DeleteFriendRequest)
  return target;
}

int DeleteFriendRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ik_FriendService.DeleteFriendRequest)
  int total_size = 0;

  // optional int32 myid = 1;
  if (this->myid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->myid());
  }

  // optional int32 friendid = 2;
  if (this->friendid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friendid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ik_FriendService.DeleteFriendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteFriendRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteFriendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ik_FriendService.DeleteFriendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ik_FriendService.DeleteFriendRequest)
    MergeFrom(*source);
  }
}

void DeleteFriendRequest::MergeFrom(const DeleteFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ik_FriendService.DeleteFriendRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.myid() != 0) {
    set_myid(from.myid());
  }
  if (from.friendid() != 0) {
    set_friendid(from.friendid());
  }
}

void DeleteFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ik_FriendService.DeleteFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendRequest::CopyFrom(const DeleteFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ik_FriendService.DeleteFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendRequest::IsInitialized() const {

  return true;
}

void DeleteFriendRequest::Swap(DeleteFriendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteFriendRequest::InternalSwap(DeleteFriendRequest* other) {
  std::swap(myid_, other->myid_);
  std::swap(friendid_, other->friendid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFriendRequest_descriptor_;
  metadata.reflection = DeleteFriendRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteFriendRequest

// optional int32 myid = 1;
void DeleteFriendRequest::clear_myid() {
  myid_ = 0;
}
 ::google::protobuf::int32 DeleteFriendRequest::myid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.DeleteFriendRequest.myid)
  return myid_;
}
 void DeleteFriendRequest::set_myid(::google::protobuf::int32 value) {
  
  myid_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.DeleteFriendRequest.myid)
}

// optional int32 friendid = 2;
void DeleteFriendRequest::clear_friendid() {
  friendid_ = 0;
}
 ::google::protobuf::int32 DeleteFriendRequest::friendid() const {
  // @@protoc_insertion_point(field_get:ik_FriendService.DeleteFriendRequest.friendid)
  return friendid_;
}
 void DeleteFriendRequest::set_friendid(::google::protobuf::int32 value) {
  
  friendid_ = value;
  // @@protoc_insertion_point(field_set:ik_FriendService.DeleteFriendRequest.friendid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

FriendServiceRpc::~FriendServiceRpc() {}

const ::google::protobuf::ServiceDescriptor* FriendServiceRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendServiceRpc_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* FriendServiceRpc::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendServiceRpc_descriptor_;
}

void FriendServiceRpc::GetFriendList(::google::protobuf::RpcController* controller,
                         const ::ik_FriendService::FriendListRequest*,
                         ::ik_FriendService::FriendListResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendList() not implemented.");
  done->Run();
}

void FriendServiceRpc::GetUserInfo(::google::protobuf::RpcController* controller,
                         const ::ik_FriendService::UserInfoRequest*,
                         ::ik_FriendService::UserInfoReponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserInfo() not implemented.");
  done->Run();
}

void FriendServiceRpc::AddFriend(::google::protobuf::RpcController* controller,
                         const ::ik_FriendService::AddFriendRequest*,
                         ::google::protobuf::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddFriend() not implemented.");
  done->Run();
}

void FriendServiceRpc::DeleteFriend(::google::protobuf::RpcController* controller,
                         const ::ik_FriendService::DeleteFriendRequest*,
                         ::google::protobuf::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteFriend() not implemented.");
  done->Run();
}

void FriendServiceRpc::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), FriendServiceRpc_descriptor_);
  switch(method->index()) {
    case 0:
      GetFriendList(controller,
             ::google::protobuf::down_cast<const ::ik_FriendService::FriendListRequest*>(request),
             ::google::protobuf::down_cast< ::ik_FriendService::FriendListResponse*>(response),
             done);
      break;
    case 1:
      GetUserInfo(controller,
             ::google::protobuf::down_cast<const ::ik_FriendService::UserInfoRequest*>(request),
             ::google::protobuf::down_cast< ::ik_FriendService::UserInfoReponse*>(response),
             done);
      break;
    case 2:
      AddFriend(controller,
             ::google::protobuf::down_cast<const ::ik_FriendService::AddFriendRequest*>(request),
             ::google::protobuf::down_cast< ::google::protobuf::Empty*>(response),
             done);
      break;
    case 3:
      DeleteFriend(controller,
             ::google::protobuf::down_cast<const ::ik_FriendService::DeleteFriendRequest*>(request),
             ::google::protobuf::down_cast< ::google::protobuf::Empty*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& FriendServiceRpc::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ik_FriendService::FriendListRequest::default_instance();
    case 1:
      return ::ik_FriendService::UserInfoRequest::default_instance();
    case 2:
      return ::ik_FriendService::AddFriendRequest::default_instance();
    case 3:
      return ::ik_FriendService::DeleteFriendRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& FriendServiceRpc::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ik_FriendService::FriendListResponse::default_instance();
    case 1:
      return ::ik_FriendService::UserInfoReponse::default_instance();
    case 2:
      return ::google::protobuf::Empty::default_instance();
    case 3:
      return ::google::protobuf::Empty::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendServiceRpc_Stub::FriendServiceRpc_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendServiceRpc_Stub::FriendServiceRpc_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
FriendServiceRpc_Stub::~FriendServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendServiceRpc_Stub::GetFriendList(::google::protobuf::RpcController* controller,
                              const ::ik_FriendService::FriendListRequest* request,
                              ::ik_FriendService::FriendListResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::GetUserInfo(::google::protobuf::RpcController* controller,
                              const ::ik_FriendService::UserInfoRequest* request,
                              ::ik_FriendService::UserInfoReponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::AddFriend(::google::protobuf::RpcController* controller,
                              const ::ik_FriendService::AddFriendRequest* request,
                              ::google::protobuf::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendServiceRpc_Stub::DeleteFriend(::google::protobuf::RpcController* controller,
                              const ::ik_FriendService::DeleteFriendRequest* request,
                              ::google::protobuf::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace ik_FriendService

// @@protoc_insertion_point(global_scope)
